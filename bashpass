#!/usr/bin/env bash
#shellcheck shell=bash source=/dev/null disable=SC1008,SC2096,SC2155,SC1090,SC2068,SC2086,SC2141,SC2046,SC2015
#
# bashpass gtkdialog/yad/zenity/kdialog/Xdialog/gdialog/whiptail/cdialog/dialog/terminal assisted password management.

# Restrict permissions
umask 077
# Set verbose xtrace off (unless specified by user option) and disable globbing.
set +vx -f
# Timeout settings for Xdialog, Xmessage
# xmessage timeout is in seconds...
declare -rx XMTO="30"
declare -rx XDTO="$((XMTO * 1000))" # Xdialog/dialog is in milliseconds
# Xdialog/dialog
declare -rx DIALOG_OK=0 DIALOG_CANCEL=1 DIALOG_HELP=2 \
	DIALOG_EXTRA=3 DIALOG_ITEM_HELP=4 DIALOG_ESC=255 \
	XDIALOG_HIGH_DIALOG_COMPAT=1 XDIALOG_FORCE_AUTOSIZE=1 \
	XDIALOG_INFOBOX_TIMEOUT="${XDTO}" XDIALOG_NO_GMSGS=1
# Signals to trap
declare -rx SIG_NONE=0 SIG_HUP=1 SIG_INT=2 SIG_QUIT=3 SIG_KILL=9 SIG_TERM=15
#link free (S)cript: (D)ir(N)ame, (B)ase(N)ame.
declare -r sdn="$(dirname "$(realpath "${BASH_SOURCE[0]}")")" \
	sbn="$(basename "$(realpath "${BASH_SOURCE[0]}")")"
declare -r dbsd="dbs" \
	scsd="srcs"
cd "${sdn}" && [[ -r "${dbsd}" ]] && [[ -r "${scsd}" ]] || { echo "Something's not quite right..." >&2; exit 1; }
# declare cnfd="${XDG_CONFIG_HOME:-${HOME}/.config}"
declare -r bpusage="Usage: ${sbn} [sample.gpg] [yad|zenity|Xdialog|gdialog|cdialog|dialog|terminal] [--debug] [--help]"
declare usrintrfce gpgf db bngpgf bndb rpgpgf rpdb fpgpgf fpdb
# Process optional arguments
while [[ -n "${1}" ]]; do
    case "${1}" in
        *.gpg) gpgf="${1}";;
        yad|zenity|Xdialog|gdialog|cdialog|dialog|terminal) readonly usrintrfce="${1}";;
        -d|--debug) set -vx;;
        -h|--help) echo -ne "${bpusage}\n" >&2; exit 1;;
        *) echo -ne "Unknown option: ${1}\n${bpusage}\n" >&2; exit 1;;
    esac
    shift
done
# GPG file, db file related vars
if [[ -z "${gpgf}" ]]; then
    readonly gpgf="sample.gpg"
fi
readonly db="${gpgf//.gpg/.sl3}"
readonly bngpgf="${gpgf}"
readonly bndb="${db}"
readonly rpgpgf="${dbsd}/${gpgf}"
readonly rpdb="${dbsd}/${db}"
readonly fpgpgf="${sdn}/${rpgpgf}"
readonly fpdb="${sdn}/${rpdb}"
# Try to accommodate optional preference...
# if [[ "${usrintrfce}" == "gtkdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, gtkdialog
#     declare -xr DIALOG="$(type -P "${usrintrfce}")"
if [[ "${usrintrfce}" == "yad" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, yad
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "zenity" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, zenity
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
# elif [[ "${usrintrfce}" == "kdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
#     declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "Xdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "gdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
# elif [[ "${usrintrfce}" == "whiptail" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for whiptail
#     declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "cdialog" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for cdialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "dialog" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for dialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")"
elif [[ "${usrintrfce}" == "terminal" ]]; then # plain ol' terminal
    unset DIALOG
else # -z USERINTRFCE etc
    # ... or pick a default available UI
    # if [[ -x "$(type -P gtkdialog)" && -n "${DISPLAY}" ]]; then # Check for X, gtkdialog
    # 	declare -xr DIALOG="$(type -P gtkdialog)"
    # 	readonly usrintrfce="gtkdialog"
    if [[ -x "$(type -P yad)" && -n "${DISPLAY}" ]]; then # Check for X, yad
	declare -xr DIALOG="$(type -P yad)"
	readonly usrintrfce="yad"
    elif [[ -x "$(type -P zenity)" && -n "${DISPLAY}" ]]; then # Check for X, zenity
	declare -xr DIALOG="$(type -P zenity)"
	readonly usrintrfce="zenity"
    # elif [[ -x "$(type -P kdialog)" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
    # 	declare -xr DIALOG="$(type -P kdialog)"
    # 	readonly usrintrfce="kdialog"
    elif [[ -x "$(type -P Xdialog)" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
	declare -xr DIALOG="$(type -P Xdialog)"
	readonly usrintrfce="Xdialog"
    elif [[ -x "$(type -P gdialog)" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
	declare -xr DIALOG="$(type -P gdialog)"
	readonly usrintrfce="gdialog"
    # elif [[ -x "$(type -P whiptail)" ]]; then # Check for whiptail
    # 	declare -xr DIALOG="$(type -P whiptail)"
    # 	readonly usrintrfce="whiptail"
    elif [[ -x "$(type -P cdialog)" ]]; then # Check for cdialog
	declare -xr DIALOG="$(type -P cdialog)"
	readonly usrintrfce="cdialog"
    elif [[ -x "$(type -P dialog)" ]]; then # Check for dialog
	declare -xr DIALOG="$(type -P dialog)"
	readonly usrintrfce="dialog"
    else
	unset DIALOG
	readonly usrintrfce="terminal"
    fi
fi
# gpg commands
type -P gpg  &>/dev/null && gpgc="$(type -P gpg)"
type -P gpg2 &>/dev/null && gpgc="$(type -P gpg2)"
[[ -r "${sdn}/.${sbn}.rc" ]] && source "${sdn}/.${sbn}.rc"
if [[ -n "${BP_KEY}" ]]; then
    readonly -a gpgec=("${gpgc}" "--quiet" "--yes" "--trust-model" "always" "--recipient" "${BP_KEY}" "--output" "${rpgpgf}" "--encrypt" "${rpdb}")
elif [[ -n "${BP_EML}" ]]; then
    readonly -a gpgec=("${gpgc}" "--quiet" "--yes" "--trust-model" "always" "--recipient" "${BP_EML}" "--output" "${rpgpgf}" "--symmetric" "--encrypt" "${rpdb}")
else
    readonly -a gpgec=("${gpgc}" "--quiet" "--yes" "--output" "${rpgpgf}" "--symmetric" "--encrypt" "${rpdb}")
fi
readonly -a gpgdc=("${gpgc}" "--quiet" "--yes" "--output" "${rpdb}" "--decrypt" "${rpgpgf}")
	 
# Shred commands
type -P shred &> /dev/null && \
    readonly -a shrc=( "shred" "--zero" "--remove" ) || \
	readonly -a shrc=( "rm" "-P" "-f" )
# SQLite commands
readonly -a dcm=( "sqlite3" "-list" "${rpdb}" ) \
	 rcm=( "sqlite3" "-line" "${rpdb}" ) \
	 icm=( "sqlite3" "-csv" "${rpdb}" ) \
	 ccm=( "sqlite3" "-column" "-header" "${rpdb}" ) \
	 scm=( "sqlite3" "-separator" " " "${rpdb}" ) \
	 sql3=( "sqlite3" "${rpdb}" )
# Temp files
readonly mutex="${dbsd}/.${bndb}.mtx"
readonly tf="${mutex}"
# Sources to use
readonly -a srcsfs=( 
    "${scsd}/sqlite3.src"
    "${scsd}/functions.src"
    "${scsd}/${usrintrfce}.src"
)
for i in ${srcsfs[@]}; do
    source "${i}" || exit $?
done

create() {

    local maxid="$(func_maxid)" id="${1}" dm em un pw pw1 cm str2chk="|"

    while func_chkinpt "${str2chk}" || func_checkpw "${pw}" "${pw1}"; do
	"${FUNCNAME[0]}_${usrintrfce}" "${id}" || return $?
	source "${tf}"
	str2chk="${dm}${em}${un}${pw}${cm}"
	func_chkinpt "${str2chk}" && func_show_err "Make sure you're not using \nany restricted charachters as input,like: $(func_regex_forbid)\nnamely: space, backslash, backtick, pound, colon, comma or quotes(both)."
	func_checkpw "${pw}" "${pw1}" && func_show_err "Password missmatch!"
    done

    [[ "${pw}" =~ ^[0-9]+$ ]] && (( pw >= 8 && pw <= 64 )) && pw="$(func_gpw "${pw}")"
    (( ${#pw} < 8 )) && pw="$(func_gpw 16)"

    if [[ -n "${id}" ]]; then
	"${dcm[@]}" "$(sl3_update_rec "${id},${dm},${em},${un},${pw},${cm}")"
    else
	"${sql3[@]}" "$(sl3_insert_into "${dm},${em},${un},${pw},${cm}")"
	"results_${usrintrfce}" "$(sl3_select_newrecs "${maxid}")"
    fi
    # cleanup
    unset dm em un pw pw1 cm
}

retrieve() {
    local dm rc pw
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    source "${tf}"
    "results_${usrintrfce}" "$(sl3_select_dmemun_like "${dm}")"
}

update() {
    local id errlvl pw pw1
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    source "${tf}"
    create "${id}" || return $?
    "results_${usrintrfce}" "$(sl3_select_id_eq "${id}")"
}

delete() {
    local errlvl id
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    source "${tf}"
    "${dcm[@]}" "$(sl3_delete_id_eq "${id}")"
    "message_${usrintrfce}"
}

importcsv() {
    local maxid csvf errlvl
    maxid="$(func_maxid)"
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    source "${tf}"
    "${icm[@]}" "$(sl3_importcsv_sql "${csvf}")"
    # "${rcm[@]}" "$(sl3_select_newrecs "${maxid}")" > "${tf}"
    "results_${usrintrfce}" "$(sl3_select_newrecs "${maxid}")"
}

exportcsv(){
    local csvf errlvl
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    source "${tf}"
    "${icm[@]}" "$(sl3_select_all)" > "${csvf}"
    if [[ -x "$(type -P xdg-open)" ]]; then
    	"$(type -P xdg-open)" "${csvf}"
    elif [[ -x "$(type -P "${VISUAL}")"  ]]; then
    	"$(type -P "${VISUAL}")" "${csvf}"
    elif [[ -x "$(type -P "${EDITOR}")"  ]]; then
    	"$(type -P "${EDITOR}")" "${csvf}"
    else
	"${PAGER}" "${csvf}"
    fi
}

usage() {
    "${FUNCNAME[0]}_${usrintrfce}"
}

bashpass() {
    local OFS="${IFS}" errlvl=0 usrinpt=''

    func_check_prereqs || return $?
    func_check_mutex || return $?
    # GPG file not found? Let's make one and take it from there.
    [[ -r "${rpgpgf}" ]] || func_setup || return $? # Exit on failed attempts.
    func_check_decrypt || return $?
    # Have $db and $mutex so from now on we're do_quit for propper housekeeping.
    func_read_dbflds || func_do_quit $? 
    func_check_sql || func_do_quit $?
    # From now on any exit, normal or erratic is a do_quit
    trap 'func_do_quit' "${SIG_NONE}" "${SIG_HUP}" "${SIG_INT}" "${SIG_QUIT}" "${SIG_TERM}"

    # Build menus and help messages.
    local -a tui_ops=( "${red}Create${reset}" "${green}Search${reset}" "${blue}Update${reset}" "${cyan}Delete${reset}" "${yellow}Import CSV${reset}" "${yellow}Export CSV${reset}" "${magenta}SQLite3${reset}" "${white}Help${reset}" "${dim}Quit${reset}" )
    local -a gui_ops=( "Create" "Search" "Update" "Delete" "Import_CSV" "Export_CSV" "SQLite3" "Help" "Quit" )
    local -a sdesc=( "New entry" "Find account" "Regen password" "Remove entry" "Import a file" "Export a file" "Sqlite3 session" "Help screen" "Exit" )
    local -a desc=( "gather details for a new account." "search records by domain. (empty for all)" "regenerate an existing password." "remove an account." "prompt for csv file to import." "prompt for csv file to export." "start an sqlite session against ${bndb}." "show this message" "terminate script." )

    local -a tui_menu=( )
    local -a tui_hmsg=( "\n${bpusage[*]}\n\n" )
    local gui_menu=""
    local kdg_menu=""
    local -a gui_hmsg=( "\n${bpusage[*]}\n\n" )

    for (( x = 0; x < ${#tui_ops[@]}; x++ )); do
	tui_menu+=( "${x}:${tui_ops[x]}" )
	(( ( x + 1 ) % 4 == 0 )) && tui_menu+=( "\n" ) || tui_menu+=( "\t" )
        tui_hmsg+=( "Use ${x}, for ${tui_ops[x]}, which will ${desc[x]}\n" )
        gui_menu+="${gui_ops[x]}|${sdesc[x]}|${desc[x]}|"
        kdg_menu+="${x} ${gui_ops[x]} "
        gui_hmsg+=( "Use ${gui_ops[x]}, to ${desc[x]}\n" )
    done

    tui_menu+=( "\nChoose[0-$((${#tui_ops[*]}-1))]:" )
    local tmp_hmsg="\naccounts table format is as follows:\n$("${sql3[@]}" ".schema ${act}")\n\n"
    tui_hmsg+=( "${tmp_hmsg}" )
    gui_hmsg+=( "${tmp_hmsg}" )

    while :; do
	"${FUNCNAME[0]}_${usrintrfce}"
        errlvl=$?
        case "${errlvl}" in
            "0"|"${DIALOG_OK}")
                case "$(cat "${tf}")" in
                    "${gui_ops[0]}"|"0") create ;;
                    "${gui_ops[1]}"|"1") retrieve ;;
                    "${gui_ops[2]}"|"2") update ;;
                    "${gui_ops[3]}"|"3") delete ;;
                    "${gui_ops[4]}"|"4") importcsv ;;
                    "${gui_ops[5]}"|"5") exportcsv ;;
                    "${gui_ops[6]}"|"6") "${sql3[@]}" ;;
                    "${gui_ops[7]}"|"7") usage ;;
                    "${gui_ops[8]}"|"8") exit ;;
                    *) echo -ne "Unknown input: ${usrinpt}. Choose from 0 to $((${#tui_ops[*]}-1))\n" >&2;;
                esac ;;
            "1"|"${DIALOG_CANCEL}") exit ;;
            [2-4]|"${DIALOG_HELP}"|"${DIALOG_EXTRA}"|"${DIALOG_ITEM_HELP}") usage ;;
            "255"|"${DIALOG_ESC}") exit ;;
        esac
    done
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && "${sbn}" "${@}"
