#!/usr/bin/env bash
#shellcheck shell=bash source=/dev/null disable=SC1008,SC2096,SC2155,SC1090,SC2068,SC2086,SC2141,SC2046,SC2015
#
# bashpass yad/zenity/Xdialog/cdialog/dialog/terminal assisted password management.

# Restrict permissions
umask 077
# Set verbose xtrace off (unless specified by user option) and disable globbing.
set +vx -f
# Timeout settings for Xdialog, Xmessage
# xmessage timeout is in seconds...
declare -rx XMTO="30"
declare -rx XDTO="$((XMTO * 1000))" # ... Xdialog/dialog is in milliseconds
# Signals to trap
declare -rx SIG_NONE=0 SIG_HUP=1 SIG_INT=2 SIG_QUIT=3 SIG_KILL=9 SIG_TERM=15
#link free (S)cript: (D)ir(N)ame, (B)ase(N)ame.
declare -r sdn="$(dirname "$(realpath "${BASH_SOURCE[0]}")")" \
	sbn="$(basename "$(realpath "${BASH_SOURCE[0]}")")"
declare -r dbsd="dbs" \
	scsd="srcs"
# cd "${sdn}" && [[ -r "${dbsd}" ]] && [[ -r "${scsd}" ]] || { echo "Something's not quite right..." >&2; exit 1; }
# declare cnfd="${XDG_CONFIG_HOME:-${HOME}/.config}"
declare -r bpusage="Usage: ${sbn} [sample.gpg] [yad|zenity|Xdialog|cdialog|dialog|terminal] [mem|dsk] [--debug] [--help]"
declare usrintrfce gpgf db bngpgf bndb rpgpgf rpdb fpgpgf fpdb be="dsk"

create() {
    local maxid="$(${be}_maxid)" id="${1}" dm em un pw pw1 cm str2chk="|"
    while func_chkinpt "${str2chk}" || func_chkpwd "${pw}" "${pw1}"; do
	"${FUNCNAME[0]}_${usrintrfce}" "${id}" || return $?
	str2chk="${dm}${em}${un}${pw}${cm}"
	func_chkinpt "${str2chk}" && func_show_err "Make sure you're not using \nany restricted charachters as input, like: $(func_regex_forbid)\nnamely: space, backslash, backtick, pound, colon, comma or quotes(both)!"
	func_chkpwd "${pw}" "${pw1}" && func_show_err "Password mismatch!"
    done

    [[ "${pw}" =~ ^[0-9]+$ ]] && (( pw >= 8 && pw <= 64 )) && pw="$(func_gpw "${pw}")"
    (( ${#pw} < 8 )) && pw="$(func_gpw 16)"

    if [[ -z "${1}" ]]; then
	"${be}_insert_rec" "${dm}|${em}|${un}|${pw}|${cm}"
	"results_${usrintrfce}" "$(${be}_select_newrecs "${maxid}")"
    else
	"${be}_update_rec" "${id}|${dm}|${em}|${un}|${pw}|${cm}"
    fi
    # cleanup
    unset id dm em un pw pw1 cm
}

retrieve() {
    local criteria
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    "results_${usrintrfce}" "$(${be}_select_dmemun_like "${criteria}")"
}

update() {
    local id
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    create "${id}" || return $?
    "results_${usrintrfce}" "$(${be}_select_id_eq "${id}")"
}

delete() {
    local id
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    "${be}_delete_id_eq" "${id}"
    "message_${usrintrfce}"
}

importcsv() {
    local maxid csvf
    maxid="$(func_maxid)"
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    "${be}_importcsv_sql" "${csvf}"
    "results_${usrintrfce}" "$(${be}_select_newrecs "${maxid}")"
}

exportcsv(){
    local csvf
    "${FUNCNAME[0]}_${usrintrfce}" || return $?
    "${be}_select_all" > "${csvf}"
    if [[ -x "$(type -P xdg-open)" ]]; then
    	"$(type -P xdg-open)" "${csvf}"
    elif [[ -x "$(type -P "${VISUAL}")"  ]]; then
    	"$(type -P "${VISUAL}")" "${csvf}"
    elif [[ -x "$(type -P "${EDITOR}")"  ]]; then
    	"$(type -P "${EDITOR}")" "${csvf}"
    else
	"${PAGER}" "${csvf}"
    fi
}

usage() {
    "${FUNCNAME[0]}_${usrintrfce}"
}

menu() {
    local usrinpt="" errlvl
    # Build menus and help messages.
    local -a tui_ops=( "${green}Create${default}" "${blue}Search${default}" "${magenta}Update${default}" "${red}Delete${default}" "${yellow}Import${default}" "${yellow}Export${default}" "${cyan}SQLite3${default}" "${white}Help${default}" "${white}Quit${default}" )
    local -a gui_ops=( "Create" "Search" "Update" "Delete" "Import" "Export" "SQLite3" "Help" "Quit" )
    local -a sdesc=( "New entry" "Find account" "Regen password" "Remove entry" "Import a csv file" "Export a csv file" "Sqlite3 session" "Help screen" "Exit" )
    local -a desc=( "gather details for a new account." "search records by domain. (empty for all)" "regenerate an existing password." "remove an account." "prompt for csv file to import." "prompt for csv file to export." "start an sqlite session against ${bndb}." "show this message" "terminate script." )

    local -a tui_menu=( )
    local -a tui_hmsg=( "\n${bpusage[*]}\n\n" )
    local gui_menu=""
    local -a gui_hmsg=( "\n${bpusage[*]}\n\n" )

    for (( x = 0; x < ${#tui_ops[@]}; x++ )); do
	tui_menu+=( "${x}:${tui_ops[x]}" )
	(( ( x + 1 ) % 4 == 0 )) && tui_menu+=( "\n" ) || tui_menu+=( "\t" )
        tui_hmsg+=( "Use ${x}, for ${tui_ops[x]}, which will ${desc[x]}\n" )
        gui_menu+="${gui_ops[x]}|${sdesc[x]}|${desc[x]}|"
        gui_hmsg+=( "Use ${gui_ops[x]}, to ${desc[x]}\n" )
    done

    tui_menu+=( "\nChoose[0-$((${#tui_ops[*]}-1))]:" )
    local tmp_hmsg="\naccounts table format is as follows:\n$("${sl3[@]}" ".schema ${act}")\n\n"
    tui_hmsg+=( "${tmp_hmsg}" )
    gui_hmsg+=( "${tmp_hmsg}" )

    while :; do
	"${FUNCNAME[0]}_${usrintrfce}"
	errlvl=$?
	case "${errlvl}" in
            "0"|"${DIALOG_OK}")
                case "${usrinpt}" in
                    "${gui_ops[0]}"|"0") create ;;
                    "${gui_ops[1]}"|"1") retrieve ;;
                    "${gui_ops[2]}"|"2") update ;;
                    "${gui_ops[3]}"|"3") delete ;;
                    "${gui_ops[4]}"|"4") importcsv ;;
                    "${gui_ops[5]}"|"5") exportcsv ;;
                    "${gui_ops[6]}"|"6") "${sl3[@]}" ;;
                    "${gui_ops[7]}"|"7") usage ;;
                    "${gui_ops[8]}"|"8") exit ;;
                    *) echo -ne "Unknown input: ${usrinpt}. Choose from 0 to $((${#tui_ops[*]}-1))\n" >&2 ;;
                esac ;;
            "1"|"${DIALOG_CANCEL}") exit ;;
            [2-4]|"${DIALOG_HELP}"|"${DIALOG_EXTRA}"|"${DIALOG_ITEM_HELP}") usage ;;
	    # Most ?dialog implementations return a 255 exit code on esc, Yad returns 252!
            "252"|"255"|"${DIALOG_ESC}") exit ;;
        esac
	usrinpt=""
    done
}

bashpass() {
    # Process optional arguments
    while [[ -n "${1}" ]]; do
	case "${1}" in
            *.gpg)
		export gpgf="${1}" ;;
            yad|zenity|Xdialog|cdialog|dialog|terminal)
		export usrintrfce="${1}" ;;
	    mem|dsk)
		export be="${1}" ;;
	    csv|xml|json)
		echo -ne "${1}: No such backend (yet)!\n${bpusage}\n" >&2; exit 1 ;;
            -d|--debug)
		set -vx ;;
            -h|--help)
		echo -ne "${bpusage}\n" >&2; exit 1 ;;
            *)
		echo -ne "${1}: Unknown option!\n${bpusage}\n" >&2; exit 1 ;;
	esac
	shift
    done

    source "${scsd}/functions.src" || exit 1

    func_assignui # Assign ?UI related vars, Needs optional args set.
    func_assignvars # Vars we'll need
    func_assigncmds # Commands we'll need
    
    # Source backend/UI functions
    declare -ra srcsfs=( 
	"${scsd}/${be}.src"
	"${scsd}/${usrintrfce}.src"
    )

    for i in ${srcsfs[@]}; do
	source "${i}" || exit $?
    done

    func_check_prereqs || return $?
    func_check_mutex || return $?

    case "${be}" in
	"mem")
	    func_read_dbflds || func_do_quit $? 
	    func_check_${be} || func_do_quit $? ;;
	"dsk")
	    # GPG file not found? Let's make one and take it from there.
	    [[ -r "${rpgpgf}" ]] || func_setup || return $? # Exit on failed attempts.
	    func_check_decrypt || return $?
	    # Have $db and $mutex so from now on we're do_quit for propper housekeeping.
	    func_read_dbflds || func_do_quit $? 
	    func_check_${be} || func_do_quit $? ;;
	*) func_show_err "${be}: No such back end! (yet...)"; return $? ;;
    esac

    # From now on any exit, normal or erratic is a do_quit
    trap func_do_quit "${SIG_NONE}" "${SIG_HUP}" "${SIG_INT}" "${SIG_QUIT}" # "${SIG_KILL}" "${SIG_TERM}" Don't trap kill-term signals coz... reasons...
    menu
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && "${sbn}" "${@}"
