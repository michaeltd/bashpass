#!/usr/bin/env -S bash --norc --noprofile
#shellcheck shell=bash source=/dev/null disable=SC1008,SC2096,SC2155,SC1090,SC2068,SC2086,SC2141,SC2046,SC2015
#
# bashpass Xdialog/dialog/terminal assisted password management.

# Timeout settings for Xdialog, Xmessage
# xmessage timeout is in seconds...
declare -rx XMTO="30"
declare -rx XDTO="$((XMTO * 1000))" # Xdialog/dialog is in milliseconds

# Signals to trap
declare -rx SIG_NONE=0 SIG_HUP=1 SIG_INT=2 SIG_QUIT=3 SIG_KILL=9 SIG_TERM=15

#link free (S)cript: (D)ir(N)ame, (B)ase(N)ame.
declare -r sdn="$(dirname "$(realpath "${BASH_SOURCE[0]}")")" \
	sbn="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

declare -r bpusage="Usage: ${sbn} [sample.gpg] [Xdialog|dialog|terminal] [--debug] [--help]"

declare gpgf db bngpgf bndb usrintrfce

# Process optional arguments
while [[ -n "${1}" ]]; do
    case "${1}" in
        *.gpg) gpgf="${1}";;
        Xdialog|dialog|terminal) readonly usrintrfce="${1}";;
        -d|--debug) set -x;;
        -h|--help) echo -ne "${bpusage}\n" >&2; exit 1;;
        *) echo -ne "Unknown option: ${1}\n" >&2;
	   echo -ne "${bpusage}\n" >&2; exit 1;;
    esac
    shift
done

# Try to accommodate optional preference...
if [[ "${usrintrfce}" == "Xdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")" L="0" C="0" 
elif [[ "${usrintrfce}" == "dialog" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for dialog
    declare -xr DIALOG="$(type -P "${usrintrfce}")" L="0" C="0"
elif [[ "${usrintrfce}" == "terminal" ]]; then # plain ol' terminal
    unset DIALOG
else # -z USERINTRFCE etc
    # ... or pick a default available UI
    if [[ -x "$(type -P Xdialog)" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
	declare -xr DIALOG="$(type -P Xdialog)" L="0" C="0"
	readonly usrintrfce="Xdialog"
    elif [[ -x "$(type -P dialog)" ]]; then # Check for dialog
	declare -xr DIALOG="$(type -P dialog)" L="0" C="0"
	readonly usrintrfce="dialog"
    else
	unset DIALOG
	readonly usrintrfce="terminal"
    fi
fi

[[ -n "${DIALOG}" ]] && source "${sdn}/sources/dialog.src" || source "${sdn}/sources/terminal.src"

if [[ -n "${gpgf}" ]]; then
    readonly gpgf="${sdn}/databases/${gpgf}"
    readonly db="${gpgf%%.gpg}"
    readonly bngpgf="${gpgf/*\/}" bndb="${db/*\/}"
else
    readonly gpgf="${sdn}/databases/sample.gpg"
    readonly db="${gpgf%%.gpg}"
    readonly bngpgf="${gpgf/*\/}" bndb="${db/*\/}"
fi

readonly act="ac"
# gpg & shred commands
readonly -a gpgc=( "gpg" "--batch" "--yes" "--default-recipient-self" "--output" )
type -P shred &> /dev/null && readonly -a shrc=( "shred" "--zero" "--remove" ) || readonly -a shrc=( "rm" "-f" )

# SQLite
# Custom -init files ensures there will be no functionality breaking ~/.sqliterc surprises.
# We also need to dump stderr into /dev/null to spare users "-- loading resources from ..." msgs.
readonly sql3rc="${sdn}/databases/sqliterc_"
readonly -a dcm=( "sqlite3" "-init" "${sql3rc}data" "${db}" ) \
	 rcm=( "sqlite3" "-init" "${sql3rc}report" "${db}" ) \
	 icm=( "sqlite3" "-init" "${sql3rc}import" "${db}" ) \
	 sql3=( "sqlite3" "${db}" )
# Temp files
readonly tf="${sdn}/databases/.${bndb}.${$}.tf" \
	 mutex="${sdn}/databases/.${bndb}.mutex"

do_quit() {
    # VACUUM on an sqlite db will safely delete erased records as per https://www.sqlite.org/lang_vacuum.html
    "${sql3[@]}" "VACUUM;"
    # Upon successfull encryption ONLY shred files
    "${gpgc[@]}" "${gpgf}" "--encrypt" "${db}" && "${shrc[@]}" {"${db}","${tf}","${mutex}"}
    read -rp "Return to continue ... "
    exit "${1:-0}"
}

display_feedback() {
    local -r msg="${*}"
    local -r ttl="${sbn}: Fatal!"
    if [[ -n "$(type -P notify-send)" && -n "${DISPLAY}" ]]; then
        "$(type -P notify-send)" "-i" "gpa" "-c" "notification" "-t" "${XDTO}" "${ttl}" "${msg}"
    elif [[ -n "$(type -P Xdialog)" && -n "${DISPLAY}" ]]; then
        "$(type -P Xdialog)" "--title" "${ttl}" "--msgbox" "${msg}" "0" "0"
    elif [[ -n "$(type -P xmessage)" && -n "${DISPLAY}" ]]; then
        "$(type -P xmessage)" "-nearmouse" "-timeout" "${XMTO}" "${ttl} ${msg}"
    elif [[ -n "$(type -P dialog)" && -z "${DISPLAY}" ]]; then
        "$(type -P dialog)" "--title" "${ttl}" "--msgbox" "${msg}" "0" "0"
    else
        echo -ne "${ttl}\n${msg}\n" >&2
    fi
    return 1
}

check_prereqs(){
    if [[ ! -t 0 ]]; then
        display_feedback "You'll need to run ${0/*\/} in a terminal (or tty)!"
    elif [[ "${BASH_VERSINFO[0]}" -lt "4" ]]; then
        display_feedback "You'll need bash major version no less than 4."
    elif [[ -z "$(type -P sqlite3 2> /dev/null)" ]]; then
        display_feedback "You need SQLite3 installed."
    elif [[ -z "$(type -P gpg 2> /dev/null)" ]]; then
        display_feedback "You need GNU Privacy Guard v2 (gnupg) installed."
    fi
}

# No mutex or die.
check_mutex() {
    if [[ -f "${mutex}" ]]; then
	display_feedback "You can only have one instance of ${bngpgf}."
    fi
    # local -ar pids=( $(pgrep -U "${USER}" -f "${bngpgf}") )
    # if [[ "${#pids[*]}" -gt "1" ]]; then
    # 	display_feedback "You can only have one instance of ${bngpgf}."
    # fi
}

# Decrypt .sqlite, setup trap and mutex or die.
check_decrypt() {
    if ! [[ "$(file -b "${gpgf}")" =~ ^PGP ]]; then
        display_feedback "${bngpgf}, does not appear to be a valid PGP file."
        return $?
    fi
    if ! "${gpgc[@]}" "${db}" "--decrypt" "${gpgf}"; then
        display_feedback "Decryption failed."
        return $?
    else
	# We do have an decrypted $db file so we might as well check it's validity.
        if ! [[ "$(file -b "${db}")" =~ ^SQLite ]]; then
            display_feedback "${bndb}, does not appear to be a valid SQLite 3.x database file."
            return $?
        fi
        touch "${mutex}"
        touch "${tf}"
    fi
}

# SQL or die.
check_sql() {
    if ! "${dcm[@]}" "SELECT * FROM ${act} ORDER BY rowid ASC;" &> /dev/null; then
        display_feedback "Need a working db to function."
    fi
}

source "${sdn}/sources/functions.src"

create() {
    local maxid="$(maxid)" dm em un pw cm

    "${FUNCNAME[0]}_${usrintrfce}" || return $?

    source "${tf}"

    [[ -z "${pw}" ]] && pw="$(gpw "16")"

    "${sql3[@]}" "INSERT INTO ${act} VALUES('${dm//:/\:}', '${em}', '${un}', '${pw}', '${cm}');"
    echo -ne ".mode line\nSELECT rowid AS id,* FROM ${act} WHERE id = $(( ++maxid ));" | "${sql3[@]}" > "${tf}"

    "results_${usrintrfce}"
}

retrieve() {
    local dm rc pw

    "${FUNCNAME[0]}_${usrintrfce}" || return $?

    source "${tf}"

    # Record Set
    2> /dev/null "${rcm[@]}" "SELECT rowid AS id,* FROM ${act} WHERE dm LIKE '%${dm}%';" > "${tf}"

    if [[ -n "$(type -P xclip)" ]]; then
        # Record Count
        rc="$(2> /dev/null "${dcm[@]}" "SELECT count(rowid) FROM ${act} WHERE dm LIKE '%${dm}%';")"
        if (( rc == 1 )); then
            pw="$(2> /dev/null "${dcm[@]}" "SELECT pw FROM ${act} WHERE dm LIKE '%${dm}%';")"
            echo "${pw}" | xclip "-r"
        fi
    fi

    "results_${usrintrfce}"
}

update() {
    local id errlvl pw

    "${FUNCNAME[0]}_${usrintrfce}" || return $?

    source "${tf}"

    [[ "${pw}" =~ ^[0-9]+$ ]] && (( pw >= 8 && pw <= 64 )) && pw="$(gpw "${pw}")"
    [[ -z "${pw}" ]] || (( ${#pw} < 8 )) && pw="$(gpw)"
    2> /dev/null "${dcm[@]}" "UPDATE ${act} SET pw = '${pw}' WHERE rowid = '${id}';"
    2> /dev/null "${rcm[@]}" "SELECT rowid AS id,* FROM ${act} WHERE id = '${id}';" > "${tf}"

    "results_${usrintrfce}"
}

delete() {
    local errlvl id

    "${FUNCNAME[0]}_${usrintrfce}" || return $?

    source "${tf}"

    2> /dev/null "${dcm[@]}" "DELETE FROM ${act} WHERE rowid = '${id}';"

    "message_${usrintrfce}"
}

importcsv() {
    local maxid csvf errlvl
    maxid="$(maxid)"
    if [[ -n "${DIALOG}" ]]; then
        "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "Enter a csv file:" "--fselect" "${HOME}/" "${L}" "${C}" 2> "${tf}"
        (( $? != DIALOG_OK )) && return
        csvf="$(cat "${tf}")"
        [[ -z "${csvf}" ]] && return
    else
        echo -ne "Enter a csv file (empty to cancel): "
        read -r csvf
        echo "${csvf}" > "${tf}"
        [[ -z "${csvf}" ]] && return
    fi
    "${icm[@]}" ".import ${csvf} ${act}" 2> /dev/null
    errlvl=$?
    if (( errlvl != 0 )); then
        if [[ -n "${DIALOG}" ]]; then
            "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "Error" "--msgbox" "$(cat "${tf}")" "${L}" "${C}"
        fi
        echo "Error: $(cat "${tf}")"
        return "${errlvl}"
    fi
    2> /dev/null "${rcm[@]}" "SELECT rowid AS id,* FROM ${act} WHERE rowid > ${maxid};" > "${tf}"
    if [[ "${DIALOG}" == "$(type -P Xdialog)" ]]; then
        "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "results" "--editbox" "${tf}" "${L}" "${C}" 2> /dev/null
    else
        "${PAGER}" "${tf}"
    fi
}

exportcsv(){
    local csvf errlvl
    if [[ -n "${DIALOG}" ]]; then
        "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "Enter a file name:" "--fselect" "${HOME}/" "${L}" "${C}" 2> "${tf}"
        (( $? != DIALOG_OK )) && return
        csvf=$(cat "${tf}")
        [[ -z "${csvf}" ]] && return
    else
        echo -ne "Enter a file name (empty to cancel): "
        read -r csvf
        echo "${csvf}" > "${tf}"
        [[ -z "${csvf}" ]] && return
    fi

    2> /dev/null "${icm[@]}" "select rowid,* from ${act} order by rowid ASC;" > "${tf}"

    errlvl=$?
    if (( errlvl != 0 )); then
        if [[ -n "${DIALOG}" ]]; then
            "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "Error" "--msgbox" "$(cat "${tf}")" "${L}" "${C}"
        fi
        echo "Error: $(cat "${tf}")"
        return "${errlvl}"
    fi

    cat "${tf}" > "${csvf}"

    if [[ -x "$(type -P xdg-open)" ]]; then
    	"$(type -P xdg-open)" "${csvf}"
    elif [[ -x "$(type -P "${VISUAL}")"  ]]; then
    	"$(type -P "${VISUAL}")" "${csvf}"
    elif [[ -x "$(type -P "${EDITOR}")"  ]]; then
    	"$(type -P "${EDITOR}")" "${csvf}"
    else
	    "${PAGER}" "${csvf}"
    fi
}

usage() {
    "${FUNCNAME[0]}_${usrintrfce}"
}

main() {

    local OFS="${IFS}" errlvl=0 usrinpt=''

    check_prereqs || return $?
    check_mutex || return $?
    check_decrypt || return $?

    # Have password $DB, $tf and $mutex so from now on, instead
    # of exiting, we're do_quit and trap for propper housekeeping.
    check_sql || do_quit $?

    trap 'do_quit ${SIG_NONE}' "${SIG_NONE}"
    trap 'do_quit ${SIG_HUP}' "${SIG_HUP}"
    trap 'do_quit ${SIG_INT}' "${SIG_INT}"
    trap 'do_quit ${SIG_QUIT}' "${SIG_QUIT}"
    trap 'do_quit ${SIG_KILL}' "${SIG_KILL}"
    trap 'do_quit ${SIG_TERM}' "${SIG_TERM}"
    
    # Build menus and help messages.
    local -a tui_ops=( "${red}Create${reset}" "${green}Retrieve${reset}" "${blue}Update${reset}" "${cyan}Delete${reset}" "${yellow}Import CSV${reset}" "${yellow}Export CSV${reset}" "${magenta}SQLite3${reset}" "${white}Help${reset}" "${dim}Quit${reset}" )
    local -a gui_ops=( "Create" "Retrieve" "Update" "Delete" "Import CSV" "Export CSV" "SQLite3" "Help" "Quit" )
    local -a sdesc=( "New entry" "Find account" "Regen password" "Remove entry" "Import a file" "Export a file" "Sqlite3 session" "Help screen" "Exit" )
    local -a desc=( "gather details for a new account." "search records by domain. (empty for all)" "regenerate an existing password." "remove an account." "prompt for csv file to import." "preview a csv file." "start an sqlite session against ${bndb}." "show this message" "terminate this script." )

    local -a tui_menu=( )
    local -a tui_hmsg=( "\n${bpusage[*]}\n\n" )
    local gui_menu=""
    local -a gui_hmsg=( "\n${bpusage[*]}\n\n" )

    for (( x = 0; x < ${#tui_ops[@]}; x++ )); do
	tui_menu+=( "${x}:${tui_ops[x]}" )
	(( ( x + 1 ) % 4 == 0 )) && tui_menu+=( "\n" ) || tui_menu+=( "\t" )
        tui_hmsg+=( "Use ${x}, for ${tui_ops[x]}, which will ${desc[x]}\n" )
        gui_menu+="${gui_ops[x]}|${sdesc[x]}|${desc[x]}|"
        gui_hmsg+=( "Use ${gui_ops[x]}, to ${desc[x]}\n" )
    done

    tui_menu+=( "\nChoose[0-$((${#tui_ops[*]}-1))]:" )
    local tmp_hmsg="\naccounts table format is as follows:\n$(2> /dev/null ${dcm[*]} ".schema ${act}")\n\n"
    tui_hmsg+=( "${tmp_hmsg}" )
    gui_hmsg+=( "${tmp_hmsg}" )

    while :; do
        if [[ -n "${DIALOG}" ]]; then # Xdialog, dialog menu
            OFS="${IFS}" IFS=$'\|'
            "${DIALOG}" "--backtitle" "${bngpgf}" "--title" "dialog" "--item-help" "--cancel-label" "Quit" "--menu" "Menu:" "$L" "$C" ${#gui_ops[*]} ${gui_menu} 2> "${tf}"
            errlvl=$?
            IFS="${OFS}"
        else # Just terminal menu.
            echo -ne " ${tui_menu[*]}"
            read -r usrinpt
            errlvl=$?
            echo "${usrinpt}" > "${tf}"
        fi
        case "${errlvl}" in
            "0"|"${DIALOG_OK}")
                case "$(cat "${tf}")" in
                    "${gui_ops[0]}"|"0") create ;;
                    "${gui_ops[1]}"|"1") retrieve ;;
                    "${gui_ops[2]}"|"2") update ;;
                    "${gui_ops[3]}"|"3") delete ;;
                    "${gui_ops[4]}"|"4") importcsv ;;
                    "${gui_ops[5]}"|"5") exportcsv ;;
                    "${gui_ops[6]}"|"6") 2> /dev/null "${rcm[@]}" ;;
                    "${gui_ops[7]}"|"7") usage ;;
                    "${gui_ops[8]}"|"8") exit ;;
                    *) echo -ne "Invalid responce: ${usrinpt}. Choose from 0 to $((${#tui_ops[*]}-1))\n" >&2;;
                esac ;;
            "1"|"${DIALOG_CANCEL}") exit ;;
            [2-4]|"${DIALOG_HELP}"|"${DIALOG_EXTRA}"|"${DIALOG_ITEM_HELP}") usage ;;
            "255"|"${DIALOG_ESC}") exit ;;
        esac
    done
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
