#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

# Xdialog/dialog
declare -rx DIALOG_OK=0 DIALOG_CANCEL=1 DIALOG_HELP=2 \
	DIALOG_EXTRA=3 DIALOG_ITEM_HELP=4 DIALOG_ESC=255 \
	XDIALOG_HIGH_DIALOG_COMPAT=1 XDIALOG_FORCE_AUTOSIZE=1 \
	XDIALOG_INFOBOX_TIMEOUT="${XDTO}" XDIALOG_NO_GMSGS=1

declare -rx L="0" C="0"

declare -arx geops=( "${L}" "${C}" )

declare -arx bt_ops=( "--backtitle" "${bngpgf}" )

menu_dialog(){
    local -ar menu_ops=( "${bt_ops[@]}"
			 "--title" "Selection Menu"
			 "--item-help"
			 "--cancel-label" "Quit"
			 "--menu" "Menu:"
			 "${geops[@]}" )
    local IFS=$'\|\t\n'
    "${DIALOG}" "${menu_ops[@]}" ${#gui_ops[*]} ${gui_menu} 2> "${tf}" || return $?
    usrinpt="$(cat "${tf}")"
    export usrinpt
}

menu_cdialog(){
    menu_dialog
}

menu_Xdialog(){
    menu_dialog
}

create_commons(){
    export -a vals
    export ttl="${FUNCNAME[@]:(-4):1} form"
    export pwmsg="Passwords can be alpha-numeric-punctuation characters.\n
You can use a pword of your choice or a desired length (8-64 chars)\n
or leave empty for auto (16 chars).\n
Make sure you're not using any restricted characters as input.\n
Like  : $(func_regex_forbid)\n
Namely: space,backslash,backtick,pound,colon,comma or quotes(both)."
    if [[ -z "${1}" ]]; then # Create mode
	export dm="${dm:-"enter a domain"}" em="${em:-"enter an email address"}"
	export un="${un:-"enter your username"}" pw="${pw:-"$(func_gpw 16)"}"
	export pw1="${pw}" cm="${cm:-"comments goes here..."}"
    else # Update mode
        export id="${1}"
	local IFS=$'\|'
	local -a rs=( $(${be}_select_all_id_eq "${id}") )
	export dm="${dm:-"${rs[1]}"}" em="${em:-"${rs[2]}"}"
	export un="${un:-"${rs[3]}"}" pw="${pw:-"${rs[4]}"}"
	export pw1="${pw:-"${rs[4]}"}" cm="${cm:-"${rs[5]}"}"
    fi
}

create_dialog() {
    create_commons "${@}"
    local -arx create_ops=( "${bt_ops[@]}" \
			    "--title" "${ttl^}" \
			    "--ok-label" "Submit" \
			    "--separator" "|" \
			    "--insecure" \
			    "--mixedform" "${ttl^}: Enter required details!\n${pwmsg}" \
			    "${geops[@]}" 0 \
			     "Domain          :" 1 1 "$dm"  1 20 50 0 0 \
			     "Email           :" 2 1 "$em"  2 20 50 0 0 \
			     "User            :" 3 1 "$un"  3 20 50 0 0 \
			     "Password        :" 4 1 "$pw"  4 20 50 0 1 \
			     "Verify Password :" 5 1 "$pw1" 5 20 50 0 1 \
			     "Comments        :" 6 1 "$cm"  6 20 50 0 0 )
    local IFS=$'\|'
    exec 3>&1
    vals=( $("${DIALOG}" "${create_ops[@]}" 2>&1 1>&3) ) || return $?
    exec 3>&-
    export dm="${vals[0]:-${dm}}" em="${vals[1]:-${em}}" un="${vals[2]:-${un}}" \
	   pw="${vals[3]:-${pw}}" pw1="${vals[4]:-${pw1}}" cm="${vals[5]:-cm}"
}

create_cdialog(){
    create_dialog "${@}"
}

create_Xdialog() {
    create_commons "${@}"
    local -ar create_ops=( "${bt_ops[@]}"
				"--stdout"
				"--title" "${ttl^}"
				"--left"
				"--separator" "|"
				"--3inputsbox" "${ttl^}: Enter required details!\n${pwmsg}\n"
				"${geops[@]}"
				"Domain" "${dm}"
				"Email" "${em}"
				"UName" "${un}" )

    local -ar pw_ops=( "${bt_ops[@]}"
			"--stdout"
			"--title" "Password"
			"--left"
			"--insecure"
			"--passwordbox" "${pwmsg}"
			"${geops[@]}" "${pw}")

    local -ar p1_ops=( "${bt_ops[@]}"
			 "--stdout"
    			 "--title" "Validate Password"
			 "--left"
			 "--insecure"
			 "--passwordbox" "${pwmsg}"
			 "${geops[@]}" "${pw1}")

    local -ar cm_ops=( "${bt_ops[@]}"
			 "--stdout"
    			 "--title" "Comments"
			 "--left"
			 "--inputbox" "Any Comments?"
			 "${geops[@]}" "${cm}")
    
    local IFS=$'\|'
    vals=( $("${DIALOG}" "${create_ops[@]}" ) ) || return $?
    local IFS=$'\ \t\n'

    dm="${vals[0]:-${dm}}" em="${vals[1]:-${em}}" un="${vals[2]:-${un}}"

    input="$("${DIALOG}" "${pw_ops[@]}")" || return $?
    pw="${input:-${pw}}"

    input="$("${DIALOG}" "${p1_ops[@]}")" || return $?
    pw1="${input:-${pw1}}"

    input="$("${DIALOG}" "${cm_ops[@]}")" || return $?
    cm="${input:-${cm}}"

    export dm em un pw pw1 cm
}

retrieve_dialog(){
    "${DIALOG}" "${bt_ops[@]}" \
    		"--title" "Criteria" \
		"--inputbox" "Criteria. (Empty for all)" \
		"${geops[@]}" 2> "${tf}" || return $?
    criteria="$(cat "${tf}")"
    export criteria
}

retrieve_cdialog(){
    retrieve_dialog
}

retrieve_Xdialog(){
    retrieve_dialog
}

update_dialog(){
    "${DIALOG}" ${bt_ops[@]} \
    		"--title" "${FUNCNAME[@]:(-4):1}" \
		"--column-separator" "|" \
		"--radiolist" "Select account to ${FUNCNAME[@]:(-4):1}" \
		"${geops[@]}" 10 \
		$(func_brl) 2> "${tf}" || return $?
    id="$(cat "${tf}")"
    export id
}

update_cdialog(){
    update_dialog
}

update_Xdialog(){
    update_dialog
}

delete_dialog(){
    update_dialog
}

delete_cdialog(){
    update_dialog
}

delete_Xdialog(){
    update_dialog
}

csv_dialog(){
    local -ar csv_ops=( "${bt_ops[@]}"
			"--title" "Enter a csv file to ${FUNCNAME[1]:0:6}:"
			"--fselect" "${sdn}/examples/"
			"${geops[@]}" )
    "${DIALOG}" "${csv_ops[@]}" 2> "${tf}" || return $?
    csvf="$(cat "${tf}")"
    export csvf
}

importcsv_dialog(){
    csv_dialog
}

importcsv_cdialog(){
    csv_dialog
}

importcsv_Xdialog(){
    csv_dialog
}

exportcsv_dialog(){
    csv_dialog
}

exportcsv_cdialog(){
    csv_dialog
}

exportcsv_Xdialog(){
    csv_dialog
}

results_dialog(){
    local pw errlvl

    local -ar preview_ops=( "${bt_ops[@]}"
			    "--title" "${FUNCNAME[@]:(-4):1}"
			    "--column-separator" "|"
			    "--radiolist" "Select account to preview/copy password:"
			    "${geops[@]}" 10 )

    local -ar showpw_ops=( ${bt_ops[@]} 
		    "--title" "Password" 
		    "--insecure" 
		    "--passwordbox" "Hit OK ot preview (Insecure).\n#${id}'s Password Is:" 
		    "${geops[@]}" )

    local -ar rlysow_pwo=( ${bt_ops[@]} \
			"--title" "Password" \
			"--inputbox" "#${id}'s Password Is:" \
			"${geops[@]}" )
    while :; do
	"${DIALOG}" "${preview_ops[@]}" $(func_brl "${1}") 2> "${tf}" || return $?
	id="$(cat "${tf}")"
	[[ -z "${id}" ]] && return 1
	pw="$(${be}_showpw "${id}")"
	"${DIALOG}" "${showpw_ops[@]}" "${pw}" 2> /dev/null && \
	    "${DIALOG}" "${rlysow_pwo[@]}" "${pw}" 2> /dev/null
	[[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    done
}

results_cdialog(){
    results_dialog "${@}"
}

results_Xdialog(){
    results_dialog "${@}"
}

message_dialog(){
    "${DIALOG}" $([[ "${DIALOG}" =~ Xdialog$ ]] && echo "--left") \
	${bt_ops[@]} \
	--title Message \
	--msgbox "Account ID: #${id} deleted. No errors reported." \
	${geops[@]} || return $?
}

message_cdialog(){
    message_dialog
}

message_Xdialog(){
    message_dialog
}

usage_dialog(){
    local hlpbox_ops=( $([[ "${DIALOG}" =~ Xdialog$ ]] && echo "--left")
		       ${bt_ops[@]}
		       --title Help
		       --msgbox
		     )
    "${DIALOG}" ${hlpbox_ops[@]} "${gui_hmsg[*]}" ${geops[@]} || return $?
}

usage_cdialog(){
    usage_dialog
}

usage_Xdialog(){
    usage_dialog
}
