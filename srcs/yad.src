#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare -rx center_op="--center" \
	title_op="--title=${bngpgf}"

declare -rx H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 2 )) \
	W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 2 ))

declare -arx geometry_ops=( "--height=$H" "--width=$W" )

declare -arx gc_ops=( ${geometry_ops[@]} "${center_op}" ) \
	gct_ops=( ${geometry_ops[@]} "${center_op}" "${title_op}" ) \
	ct_ops=( "${center_op}" "${title_op}" )

declare -arx menu_ops=( "${gc_ops[@]}" "--list" "--title=Select action" "--no-headers" "--column=Option" "--column=SDesc" "--column=LDesc" ) \
	retrieve_ops=( "${ct_ops[@]}" "--text=Enter search term to look for (empty for All):" "--entry" ) \
	update_ops=( "${gct_ops[@]}" "--text=Select an ID to update:" "--list" "--radiolist" "--column" "Update" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UName" ) \
	password_ops=( "${ct_ops[@]}" "--text=Enter password or length/empty for auto:" "--entry" "--hide-text" ) \
	password1_ops=( "${ct_ops[@]}" "--text=Enter password again:" "--entry" "--hide-text" ) \
	delete_ops=( "${gct_ops[@]}" "--text=Select an ID to delete:" "--list" "--radiolist" "--column" "Update" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UName" ) \
	csv_ops=( "${center_op}" "--title" "Select a csv file:" "--file" ) \
	results_ops=( "${gct_ops[@]}" "--text-info" ) \
	preview_ops=( "${gct_ops[@]}" "--text=Results. Select account to preview:" "--list" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UserName" "--column" "Comments" ) \
	showpw_ops=( "${ct_ops[@]}" "--text=Password selected:" "--entry" ) \
	message_ops=( "${ct_ops[@]}" "--info"  ) \
	usage_ops=( "${gc_ops[@]}" "--info" "--title=Help screen" )

bashpass_yad(){
    local IFS=$'\|\t\n'
    "${DIALOG}" "${menu_ops[@]}" ${gui_menu} > "${tf}"
    local errlvl=$?
    local -a resp=( $(cat ${tf}) )
    local selection="${resp[0]}"
    echo "${selection}" > "${tf}"
    return $errlvl
}

create_yad() {
    local id="${1}" dm="enter a domain" em="enter an email address" un="enter your username" pw="$(func_gpw 16)" cm="comments goes here..." cnt=0 
    local pw1="${pw}" title="Create Form"

    if [[ -n "${id}" ]]; then
	local IFS=$'\|'
	local -a rs=( $("${sql3[@]}" "$(sl3_select_all_id_eq "${id}")") )
	dm="${rs[1]}" em="${rs[2]}" un="${rs[3]}" pw="${rs[4]}" pw1="${rs[4]}" cm="${rs[5]}"
	local title="Update Form"
    fi

    local -ar create_ops=( "${gc_ops[@]}" "--title=${title}" "--form" "--separator=,"
			   "--field=Domain!${dm}" "${dm}"
			   "--field=Email!${em}" "${em}"
			   "--field=Uname!${un}" "${un}"
			   "--field=Password!Insert pasword or length or empty for auto.:H" "${pw}"
			   "--field=Pw check!Insert password again.:H" "${pw}"
			   "--field=Comment!${cm}" "${cm}" )
    
    "${DIALOG}" "${create_ops[@]}" > "${tf}" || return $?

    local vals="$(cat "${tf}")"

    local IFS=$','
    for i in $vals; do arv[((cnt++))]="$i"; done

    echo -ne "id=\"${id}\"\ndm=\"${arv[0]:-NULL}\"\nem=\"${arv[1]:-NULL}\"\nun=\"${arv[2]:-NULL}\"\npw=\"${arv[3]}\"\npw1=\"${arv[4]}\"\ncm=\"${arv[5]:-NULL}\"\n" > "${tf}"

}

retrieve_yad() {
    local dm errlvl
    "${DIALOG}" "${retrieve_ops[@]}" > "${tf}" || return $?
    dm="$(cat "${tf}")"
    echo -ne "dm=\"${dm}\"" > "${tf}"
}

update_yad() {
    local id errlvl pw pw1 rs IFS=$'\|\t\n'
    "${DIALOG}" "${update_ops[@]}" $(func_brlzen) > "${tf}" || return $?
    local rs=( $(cat ${tf}) )
    id="${rs[1]}"

    [[ -z "${id}" ]] && return 1

    echo -ne "id=\"${id}\"\n" > "${tf}"
}

delete_yad() {
    local id errlvl rs IFS=$'\|\t\n'
    "${DIALOG}" "${delete_ops[@]}" $(func_brlzen) > "${tf}" || return $?

    local rs=( $(cat ${tf}) )

    id="${rs[1]}"

    [[ -z "${id}" ]] && return 1

    echo -ne "id=\"${id}\"" > "${tf}"
}

csv_yad(){
    local errlvl csvf
    "${DIALOG}" "${csv_ops[@]}" "--file-name=${1}" "${2}" > "${tf}" || return $?

    csvf="$(cat "${tf}")"

    [[ -z "${csvf}" ]] && return 1

    echo -ne "csvf=\"${csvf}\"\n" > "${tf}"
}

importcsv_yad() {
    csv_yad "${sdn}/examples/import.csv"
}

exportcsv_yad() {
    csv_yad "${sdn}/examples/export.csv" "--save"
}

results_yad(){
    local IFS=$'\|\t\n' id="0"
    while [[ "${id}" != "-1" ]]; do
	local -a id=( $("${DIALOG}" "${preview_ops[@]}" $("${sql3[@]}" "${1}") || echo "-1") )
	[[ "${id[0]}" == "-1" ]] && return 255
	local pw="$("${sql3[@]}" "$(sl3_showpw "${id[0]}")")"
	"${DIALOG}" "${showpw_ops[@]}" --entry-text="${pw}" > /dev/null || return $?
	[[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    done
}

message_yad(){
    "${DIALOG}" "${message_ops[@]}" "--text=Account #${id} deleted. No errors reported."
}

usage_yad() {
    "${DIALOG}" "${usage_ops[@]}" "--text=${gui_hmsg[*]}"
}
