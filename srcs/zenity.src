#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare -rx H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 2 )) \
	W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 2 ))
declare -rx title_op="--title=${bngpgf}"
declare -arx geometry_ops=( "--height=$H" "--width=$W" )
declare -arx gt_ops=( ${geometry_ops[@]} "${title_op}" )

bashpass_zenity(){
    declare -ar menu_ops=( "${gt_ops[@]}" "--list" "--text=Menu" "--hide-header"
			   "--column=Option" "--column=SDesc" "--column=LDesc" )
    local IFS=$'\|\t\n'
    "${DIALOG}" "${menu_ops[@]}" ${gui_menu} > "${tf}"
}

create_zenity() {
    local ttl="${FUNCNAME[@]:(-3):1} form"

    local -ar review_ops=( "${gt_ops[@]}"
			   "--text=${ttl^}: Enter required details.\nMake sure you're not using any restricted charachters as input,like: $(func_regex_forbid)\nnamely: space, backslash, backtick, pound, colon, comma or quotes(both)."
			   "--list" "--editable" "--separator=," "--print-column=ALL"
			   "--column=Domain" "--column=Email"
			   "--column=User Name" "--column=Comments" )
    local -ar pwd0_ops=( "--title=${ttl}" "--text=Passwords can be alpha-numeric with punctuation charachters.\nMake sure you're not using any restricted charachters as input,like: $(func_regex_forbid)\nnamely: space, backslash, backtick, pound, colon, comma or quotes(both)." "--entry" "--hide-text" )
    local -ar pwd1_ops=( "--title=${ttl}" "--text=Passwords can be alpha-numeric with punctuation charachters.\nMake sure you're not using any restricted charachters as input,like: $(func_regex_forbid)\nnamely: space, backslash, backtick, pound, colon, comma or quotes(both).\nVerification Password again: " "--entry" "--hide-text" )

    if [[ -z "${1}" ]]; then # Create mode
	local dm="${dm:-"enter a domain"}" em="${em:-"enter an email address"}"
	local un="${un:-"enter your username"}" pw="${pw:-"$(func_gpw 16)"}"
	local pw1="${pw}" cm="${cm:-"comments goes here..."}"
    else # Update mode
        local id="${1}" IFS=$'\|'
	local -a rs=( $("${sql3[@]}" "$(sl3_select_all_id_eq "${id}")") )
	local dm="${dm:-"${rs[1]}"}" em="${em:-"${rs[2]}"}"
	local un="${un:-"${rs[3]}"}" pw="${pw:-"${rs[4]}"}"
	local pw1="${pw:-"${rs[4]}"}" cm="${cm:-"${rs[5]}"}"
    fi

    local IFS=$','
    local -a vals=( $("${DIALOG}" "${review_ops[@]}" "${dm}" "${em}" "${un}" "${cm}" || echo "-1") )
    local IFS=$'\ \t\n'
    [[ "${vals[0]}" == "-1" ]] && return 255
    
    local pw="$("${DIALOG}" "${pwd0_ops[@]}" "--entry-text=${pw}" || echo "-1")"
    [[ "${pw}" == "-1" ]] && return 255

    local pw1="$("${DIALOG}" "${pwd1_ops[@]}" "--entry-text=${pw1}" || echo "-1")"
    [[ "${pw1}" == "-1" ]] && return 255

    echo -ne "export dm=\"${vals[0]:-NULL}\" em=\"${vals[1]:-NULL}\" un=\"${vals[2]:-NULL}\" pw=\"${pw}\" pw1=\"${pw1}\" cm=\"${vals[3]:-NULL}\"\n" > "${tf}"    
}

retrieve_zenity() {
    local dm errlvl
    local -ar retrieve_ops=( "${title_op}" "--text=Enter search term to look for (empty for All):" "--entry" )
    "${DIALOG}" "${retrieve_ops[@]}" > "${tf}" || return $?
    dm="$(cat "${tf}")"
    echo -ne "dm=\"${dm}\"" > "${tf}"
}

update_zenity() {
    local -ar update_ops=( "${gt_ops[@]}" "--text=Select account to update:"
			   "--list" "--hide-column=1"
			   "--column" "ID" "--column" "Domain"
			   "--column" "Email" "--column" "UName" )
    local id IFS=$'\|\t\n'
    "${DIALOG}" "${update_ops[@]}" $(func_brlzen) > "${tf}" || return $?

    id="$(cat "${tf}")"

    [[ -z "${id}" ]] && return 1

    echo -ne "id=\"${id}\"\n" > "${tf}"
}

delete_zenity() {
    local -ar delete_ops=( "${gt_ops[@]}" "--text=Select account to delete:"
			   "--list" "--hide-column=1"
			   "--column" "ID" "--column" "Domain"
			   "--column" "Email" "--column" "UName" )
    local id IFS=$'\|\t\n'
    "${DIALOG}" "${delete_ops[@]}" $(func_brlzen) > "${tf}" || return $?
    id="$(cat "${tf}")"
    [[ -z "${id}" ]] && return 1
    echo -ne "id=\"${id}\"" > "${tf}"
}

importcsv_zenity() {
    local -ar csv_ops=( "${geometry_ops[@]}" "--title=Select a csv file:" "--file-selection" )
    local csvf
    "${DIALOG}" "${csv_ops[@]}" > "${tf}" || return $?
    csvf="$(cat "${tf}")"
    [[ -z "${csvf}" ]] && return 1
    echo -ne "csvf=\"${csvf}\"\n" > "${tf}"
}

exportcsv_zenity() {
    importcsv_zenity
}

results_zenity(){
    local -ar preview_ops=( "${gt_ops[@]}" "--text=Results. Select account to preview:"
			    "--ok-label=Unsafe" "--cancel-label=Safe"
			    "--list" "--hide-column=1"
			    "--column=ID" "--column=Domain" "--column=Email"
			    "--column=UName" "--column=Comments" )
    local -ar showpw_ops=( "${title_op}" "--text=Password selected:" "--entry" )
    local IFS=$'\|\t\n' id="0"
    while [[ "${id}" != "-1" ]]; do
	local -a id="$("${DIALOG}" "${preview_ops[@]}" $("${sql3[@]}" "${1}") || echo "-1")"
	[[ "${id}" == "-1" ]] && return 255
	local pw="$("${sql3[@]}" "$(sl3_showpw "${id}")")"
	"${DIALOG}" "${showpw_ops[@]}" "--entry-text=${pw}" > /dev/null || return $?
	[[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    done
}

message_zenity(){
    local -ar message_ops=( "${title_op}" "--info" "--no-wrap" )
    "${DIALOG}" "${message_ops[@]}" "--text=Account #${id} deleted. No errors reported."
}

usage_zenity() {
    local -ar usage_ops=( "${geometry_ops[@]}" "--info" "--title=Help screen" )
    "${DIALOG}" "${usage_ops[@]}" "--text=${gui_hmsg[*]}"
}
