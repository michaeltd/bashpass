#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare -rx H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 2 )) \
	W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 2 ))

declare -rx title_op="--title=${bngpgf}"

declare -arx geometry_ops=( "--height=$H" "--width=$W" )

declare -arx gt_ops=( ${geometry_ops[@]} "${title_op}" )

menu_zenity(){
    declare -ar menu_ops=(  "${geometry_ops[@]}" "${title_op[@]}" "--list" "--text=Menu" "--hide-header"
			   "--column=Option" "--column=SDesc" "--column=LDesc" )
    local IFS=$'\|\t\n'
    usrinpt="$("${DIALOG}" "${menu_ops[@]}" ${gui_menu})" || return $?
    export usrinpt
}

create_zenity() {
    local -a vals
    local ttl="${FUNCNAME[@]:(-4):1} form"
    local pwmsg="Passwords can be alpha-numeric-punctuation characters.
You can use a pword of your choice or a desired length (8-64 chars)
or leave empty for auto (16 chars).
Make sure you're not using any restricted characters as input.
Like  : $(func_regex_forbid)
Namely: space,backslash,backtick,pound,colon,comma or quotes(both)."
    local -ar review_ops=( "${gt_ops[@]}"
			   "--text=${ttl^}: Enter required details!\n${pwmsg}\n"
			   "--list" "--editable" "--print-column=ALL"
			   "--column=Domain" "--column=Email"
			   "--column=User Name" "--column=Comments" )

    local -ar pwd0_ops=( "--title=${ttl^}"
			 "--text=${pwmsg}\n\nEnter password:\n"
			 "--entry" "--hide-text" )

    local -ar pwd1_ops=( "--title=${ttl^}"
			 "--text=${pwmsg}\n\nVerify password:\n"
			 "--entry" "--hide-text" )

    if [[ -z "${1}" ]]; then # Create mode
	dm="${dm:-"enter a domain"}" em="${em:-"enter an email address"}"
	un="${un:-"enter your username"}" pw="${pw:-"$(func_gpw 16)"}"
	pw1="${pw}" cm="${cm:-"comments goes here..."}"
    else # Update mode
        id="${1}"
	local IFS=$'\|'
	local -a rs=( $("${sql3[@]}" "$(sql_select_all_id_eq "${id}")") )
	dm="${dm:-"${rs[1]}"}" em="${em:-"${rs[2]}"}"
	un="${un:-"${rs[3]}"}" pw="${pw:-"${rs[4]}"}"
	pw1="${pw:-"${rs[4]}"}" cm="${cm:-"${rs[5]}"}"
    fi

    local IFS=$'\|\t\n'
    vals=( $("${DIALOG}" "${review_ops[@]}" "${dm}" "${em}" "${un}" "${cm}") ) || return $?
    local IFS=$'\ \t\n'

    dm="${vals[0]:-${dm}}" em="${vals[1]:-${em}}" un="${vals[2]:-${un}}" cm="${vals[3]:-cm}"

    input="$("${DIALOG}" "${pwd0_ops[@]}" "--entry-text=${pw}")" || return $?
    pw="${input:-${pw}}"

    input="$("${DIALOG}" "${pwd1_ops[@]}" "--entry-text=${pw1}")" || return $?
    pw1="${input:-${pw1}}"

    export dm em un pw pw1 cm
}

retrieve_zenity() {
    local -ar retrieve_ops=( "${title_op}"
			     "--text=Enter search term to look for (empty for All):"
			     "--entry" )
    criteria="$("${DIALOG}" "${retrieve_ops[@]}")" || return $?
    export criteria
}

update_zenity() {
    local -ar update_ops=( "${gt_ops[@]}" "--text=Select account to ${FUNCNAME[@]:(-4):1}:"
			   "--list" "--hide-column=1"
			   "--column" "ID" "--column" "Domain"
			   "--column" "Email" "--column" "Username"
			   "--column" "Comments" )
    local IFS=$'\|\t\n'
    id="$("${DIALOG}" "${update_ops[@]}" $(func_brlzen))" || return $?
    [[ -z "${id}" ]] && return 1
    export id
}

delete_zenity() {
    update_zenity
}

csv_zenity(){
    local -ar csv_ops=( "${geometry_ops[@]}"
			"--text=Select a csv file to ${FUNCNAME[1]:0:6}:"
			"--file-selection" )
    csvf="$("${DIALOG}" "${csv_ops[@]}")" || return $?
    [[ -z "${csvf}" ]] && return 1
    export csvf
}

importcsv_zenity() {
    csv_zenity
}

exportcsv_zenity() {
    csv_zenity
}

results_zenity(){
    local -ar preview_ops=( "${gt_ops[@]}" "--text=Results. Select account to preview:"
			    "--list" "--hide-column=1"
			    "--column=ID" "--column=Domain"
			    "--column=Email" "--column=UName"
			    "--column=Comments" )

    local -ar showpw_ops=( "${title_op}" "--text=Password selected:" "--entry" "--hide-text" )
    local IFS=$'\|\t\n'
    while :; do
	id="$("${DIALOG}" "${preview_ops[@]}" $("${sql3[@]}" "${1}"))" || return $?
	local pw="$("${sql3[@]}" "$(sql_showpw "${id}")")"
	"${DIALOG}" "${showpw_ops[@]}" "--entry-text=${pw}" > /dev/null || return $?
	[[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    done
}

message_zenity(){
    local -ar message_ops=( "${title_op}" "--info" "--no-wrap" )
    "${DIALOG}" "${message_ops[@]}" "--text=Account #${id} deleted. No errors reported."
}

usage_zenity() {
    local -ar usage_ops=( "${geometry_ops[@]}" "--info" "--title=Help screen" )
    "${DIALOG}" "${usage_ops[@]}" "--text=${gui_hmsg[*]}"
}
