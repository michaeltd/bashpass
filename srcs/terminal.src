#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2034,SC2155,SC2034,SC2155,SC2154

declare -r black='\e[0;30m' red='\e[0;31m' \
	green='\e[0;32m' yellow='\e[0;33m' \
	blue='\e[0;34m' magenta='\e[0;35m' \
	cyan='\e[0;36m' white='\e[0;37m' \
	default='\e[0;39m'

menu_terminal(){
    echo -ne " ${tui_menu[*]}"
    read -r usrinpt || return $?
    echo "${usrinpt}" > "${tf}"
}

create_terminal() {
    local fnc="${FUNCNAME[@]:(-4):1}: (Ctrl-D to cancel):" input
    
    if [[ -z "${1}" ]]; then # Create mode
	local dm="${dm:-"enter a domain"}" em="${em:-"enter an email address"}"
	local un="${un:-"enter your username"}" pw="${pw:-"$(func_gpw 16)"}"
	local pw1="${pw}" cm="${cm:-"comments goes here..."}"
    else # Update mode
        local id="${1}" IFS=$'\|'
	local -a rs=( $("${sql3[@]}" "$(sl3_select_all_id_eq "${id}")") )
	local dm="${dm:-"${rs[1]}"}" em="${em:-"${rs[2]}"}"
	local un="${un:-"${rs[3]}"}" pw="${pw:-"${rs[4]}"}"
	local pw1="${pw:-"${rs[4]}"}" cm="${cm:-"${rs[5]}"}"
    fi

echo -ne "${fnc^} Enter required details!
Passwords can be alpha-numeric-punctuation characters.
You can use a pword of your choice or a desired length (8-64 chars)
or leave empty for auto (16 chars).
Make sure you're not using any restricted characters as input.
Like  : $(func_regex_forbid)
Namely: space,backslash,backtick,pound,colon,comma or quotes(both).\n"
    
    echo -ne "${fnc^} default: ${dm}: "
    read -r input || return $?
    dm="${input:-${dm}}"

    echo -ne "${fnc^} default: ${em}: "
    read -r input || return $?
    em="${input:-${em}}"

    echo -ne "${fnc^} default: ${un}: "
    read -r input || return $?
    un="${input:-${un}}"

    echo -ne "${fnc^} default: ${pw}: (alpha/numeric/punctuation or length/empty for auto): "
    read -r input || return $?
    pw="${input:-${pw}}"

    echo -ne "${fnc^} default: ${pw1}: (again): "
    read -r input || return $?
    pw1="${input:-${pw1}}"

    echo -ne "${fnc^} default: ${cm}: "
    read -r input || return $?
    cm="${input:-${cm}}"

    echo -ne "${dm}|${em}|${un}|${pw}|${pw1}|${cm}" > "${tf}"
}

retrieve_terminal(){
    local dm
    echo -ne "Enter search term to look for: (empty for All) "
    read -r dm || return $?
    echo -ne "${dm}" > "${tf}"
}

update_terminal(){
    local id
    "${ccm[@]}" "$(sl3_select_preview)"
    echo -ne "Select ID to update: (empty to cancel) "
    read -r id || return $?
    [[ -z "${id}" ]] && return 1
    echo -ne "${id}" > "${tf}"
}

delete_terminal(){
    local id
    "${ccm[@]}" "$(sl3_select_preview)"
    echo -ne "Select ID to delete: (empty to cancel) "
    read -r id || return $?
    [[ -z "${id}" ]] && return 1
    echo -ne "${id}" > "${tf}"
}

csv_terminal(){
    local csvf
    echo -ne "Enter csv file to ${FUNCNAME[1]:0:6}: (empty to cancel) "
    read -r csvf || return $?
    [[ -z "${csvf}" ]] && return 1
    echo -ne "${csvf}" > "${tf}"
}

importcsv_terminal(){
    csv_terminal
}

exportcsv_terminal(){
    csv_terminal
}

results_terminal(){
    local id pw
    while :; do
	"${ccm[@]}" "${1}"
	echo -ne "Select ID to preview password: (empty to cancel) "
	read -r id || return $?
	[[ -z "${id}" ]] && return 1
	pw="$("${sql3[@]}" "$(sl3_showpw "${id}")")"
	echo "Account: ${id}, Password: ${pw}"
	[[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    done
}

message_terminal(){
    echo -ne "Account ID: #${id} deleted. No errors reported!\n"
}

usage_terminal(){
    echo -ne "${tui_hmsg[*]}"
}
