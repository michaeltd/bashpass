#!/bin/bash
#
# Pick up right editor syntax highlighting
#shellcheck disable=SC2207,SC2154

func_assigncmds(){
    # gpg commands
    type -P gpg  &>/dev/null && gpgc="$(type -P gpg)"
    type -P gpg2 &>/dev/null && gpgc="$(type -P gpg2)"

    if [[ -n "${BP_KEY}" ]]; then
	export gpgec=("${gpgc}" "-q" "--trust-model" "always" "-r" "${BP_KEY}" "-e")
    elif [[ -n "${BP_EML}" ]]; then
	export gpgec=("${gpgc}" "-q" "--trust-model" "always" "-r" "${BP_EML}" "-c" "-e")
    else
	export gpgec=("${gpgc}" "-q" "-c" "-e")
    fi
    export gpgdc=("${gpgc}" "-q" "-d")

    # Shred commands
    type -P shred &> /dev/null && \
	export shrc=( "shred" "--zero" "--remove" ) || \
	    export shrc=( "rm" "-P" "-f" )

    # SQLite commands
    export dcm=( "sqlite3" "-list" "${rpdb}" ) \
	     rcm=( "sqlite3" "-line" "${rpdb}" ) \
	     icm=( "sqlite3" "-csv" "${rpdb}" ) \
	     ccm=( "sqlite3" "-column" "-header" "${rpdb}" ) \
	     scm=( "sqlite3" "-separator" " " "${rpdb}" ) \
	     sql3=( "sqlite3" "${rpdb}" )
}

func_assignvars(){
    # GPG file, db file related vars
    case "${be}" in
	"mem") [[ -z "${gpgf}" ]] && export gpgf="sample.sql.gpg" ;;
	"sql") [[ -z "${gpgf}" ]] && export gpgf="sample.db.gpg" ;;
    esac
    export db="${gpgf//.gpg/}"
    export bngpgf="${gpgf}"
    export bndb="${db}"
    export rpgpgf="${dbsd}/${gpgf}"
    export rpdb="${dbsd}/${db}"
    export fpgpgf="${sdn}/${rpgpgf}"
    export fpdb="${sdn}/${rpdb}"
    # Temp files
    export mutex="${dbsd}/.${bndb}.mtx"
    export tf="${mutex}"
}

func_assignui(){
    # Try to accommodate optional preference...
    # if [[ "${usrintrfce}" == "gtkdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, gtkdialog
    #     declare -rx DIALOG="$(type -P "${usrintrfce}")"
    if [[ "${usrintrfce}" == "yad" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, yad
	export DIALOG="$(type -P "${usrintrfce}")"
    elif [[ "${usrintrfce}" == "zenity" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, zenity
	export DIALOG="$(type -P "${usrintrfce}")"
    elif [[ "${usrintrfce}" == "Xdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
	export DIALOG="$(type -P "${usrintrfce}")"
	# elif [[ "${usrintrfce}" == "gdialog" && -x "$(type -P "${usrintrfce}")" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
	#     export DIALOG="$(type -P "${usrintrfce}")"
	# elif [[ "${usrintrfce}" == "whiptail" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for whiptail
	#     export DIALOG="$(type -P "${usrintrfce}")"
    elif [[ "${usrintrfce}" == "cdialog" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for cdialog
	export DIALOG="$(type -P "${usrintrfce}")"
    elif [[ "${usrintrfce}" == "dialog" && -x "$(type -P "${usrintrfce}")" ]]; then # Check for dialog
	export DIALOG="$(type -P "${usrintrfce}")"
    elif [[ "${usrintrfce}" == "terminal" ]]; then # plain ol' terminal
	unset DIALOG
    else # -z USERINTRFCE etc
	# ... or pick a default available UI
	# if [[ -x "$(type -P gtkdialog)" && -n "${DISPLAY}" ]]; then # Check for X, gtkdialog
	# 	export DIALOG="$(type -P gtkdialog)"
	# 	declare -r usrintrfce="gtkdialog"
	if [[ -x "$(type -P yad)" && -n "${DISPLAY}" ]]; then # Check for X, yad
	    export DIALOG="$(type -P yad)"
	    export usrintrfce="yad"
	elif [[ -x "$(type -P zenity)" && -n "${DISPLAY}" ]]; then # Check for X, zenity
	    export DIALOG="$(type -P zenity)"
	    export usrintrfce="zenity"
	elif [[ -x "$(type -P Xdialog)" && -n "${DISPLAY}" ]]; then # Check for X, Xdialog
	    export DIALOG="$(type -P Xdialog)"
	    export usrintrfce="Xdialog"
	    # elif [[ -x "$(type -P gdialog)" && -n "${DISPLAY}" ]]; then # Check for X, kdialog
	    # 	export DIALOG="$(type -P gdialog)"
	    # 	declare -r usrintrfce="gdialog"
	    # elif [[ -x "$(type -P whiptail)" ]]; then # Check for whiptail
	    # 	export DIALOG="$(type -P whiptail)"
	    # 	declare -r usrintrfce="whiptail"
	elif [[ -x "$(type -P cdialog)" ]]; then # Check for cdialog
	    export DIALOG="$(type -P cdialog)"
	    export usrintrfce="cdialog"
	elif [[ -x "$(type -P dialog)" ]]; then # Check for dialog
	    export DIALOG="$(type -P dialog)"
	    export usrintrfce="dialog"
	else
	    unset DIALOG
	    export usrintrfce="terminal"
	fi
    fi
}

func_setup(){
    # setup - prep bashpass
    echo -ne "\n  ${rpgpgf} Not found.\n  Would you like to build it? [y/N]: "
    if [[ "$(read -r r;echo "${r:-n}")" =~ ^[Yy] ]]; then
	# exit on failed creates/encrypts.
	sqlite3 "${rpdb}" < "${sdn}/examples/create.sql" || return $?
	"${gpgec[@]}" < "${rpdb}" > "${rpgpgf}" || return $?
    else
	return 1
    fi
}

func_show_err() {
    local -r ttl="${sbn}: Error!" msg="${FUNCNAME[1]}: ${*}"
    if [[ -n "$(type -P notify-send)" && -n "${DISPLAY}" ]]; then
        "$(type -P notify-send)" "-i" "${sdn}/assets/gpa.png" "-c" "notification" "-t" "${XDTO}" "${ttl}" "${msg}"
    elif [[ -n "$(type -P dialog)" && -z "${DISPLAY}" ]]; then
        "$(type -P dialog)" "--title" "${ttl}" "--msgbox" "${msg}" "0" "0"
    else
        echo -ne "${ttl}\n${msg}\n" >&2
    fi
    return 1
}

func_do_quit() {
    # VACUUM on an sqlite db will safely delete erased records as per https://www.sqlite.org/lang_vacuum.html
    # "${sql3[@]}" "VACUUM;"
    # Upon successfull encryption ONLY shred files
    if ! "${gpgec[@]}" < "${rpdb}" > "${rpgpgf}"; then
	func_show_err "Encryption failed or canceled!"
	return "${?}"
    else
	# local -ar f2d=( "${rpdb}" "${tf}" "${mutex}" )
	local -ar f2d=( "${rpdb}" "${mutex}" )
	for i in ${f2d[@]}; do
	    ${shrc[@]} "${i}";
	done
	echo "${sbn} gracefull exit..."
        return "${1:-0}"
    fi
}

func_check_prereqs(){
    if [[ ! -t 0 ]]; then
        func_show_err "You'll need to run ${0/*\/} in a terminal (or tty)!"
    elif [[ "${BASH_VERSINFO[0]}" -lt "4" ]]; then
        func_show_err "You'll need bash major version no less than 4."
    elif [[ -z "$(type -P sqlite3 2> /dev/null)" ]]; then
        func_show_err "You need SQLite3 installed."
    elif [[ -z "$(type -P gpg 2> /dev/null)" ]] && [[ -z "$(type -P gpg2 2> /dev/null)" ]]; then
        func_show_err "You need GNU Privacy Guard v2 (gnupg) installed."
    fi
}

# No mutex or func_show_err.
func_check_mutex() {
    # local -ar pids=( $(pgrep -U "${USER}" -f "${bngpgf}") )
    # if [[ "${#pids[*]}" -gt "1" ]]; then
    # 	func_show_err "You can only have one instance of ${bngpgf}."
    # fi
    if [[ -f "${mutex}" ]]; then
	func_show_err "You can only have one instance of ${bngpgf}."
    fi
}

# Decrypt .sqlite, setup temp and mutex or func_show_err.
func_check_decrypt() {
    if ! [[ "$(file -b "${rpgpgf}")" =~ ^PGP ]]; then
        func_show_err "${bngpgf}, does not appear to be a valid PGP file."
        return $?
    elif ! "${gpgdc[@]}" < "${rpgpgf}" > "${rpdb}"; then
        func_show_err "${bngpgf} decryption failed."
        return $?
    elif ! [[ "$(file -b "${rpdb}")" =~ ^SQLite ]]; then # We do have an decrypted $db file so we might as well check it's validity.
        func_show_err "${bndb}, does not appear to be a valid SQLite 3.x database file."
        return $?
    else
        # touch {"${mutex}","${tf}"}
	touch "${mutex}"
	# mkfifo "${mutex}"
    fi
}

# SQL or func_show_err.
func_check_sql() {
    if ! "${dcm[@]}" "$(sql_select_all)" &> /dev/null; then
        func_show_err "Need a working db to function."
    fi
}

func_read_dbflds(){
    # ADHOC db table fields extractor just for the lolz factor.
    local -a tbls=($("${sql3[@]}" ".tables"))
    local schm="$("${sql3[@]}" ".schema ${tbls[0]}")"
    schm="${schm^^}" # sqlite is case insensitive
    local -a brkdwn=(
	"CREATE" "TABLE" "IF" "NOT" "NULL" "DEFAULT" "EXISTS"
	"INTEGER" "REAL" "TEXT" "BLOB" "TEXT" "NUMERIC"
	"INTEGER" "REAL" "NONE" "INT" "INTEGER" "TINYINT"
	"SMALLINT" "MEDIUMINT" "BIGINT" "UNSIGNED" "BIG"
	"INT" "INT2" "INT8" "CHARACTER" "VARCHAR" "VARYING"
	"CHARACTER" "NCHAR" "NATIVE" "NVARCHAR" "CLOB"
	"DOUBLE" "PRECISION" "FLOAT" "NUMERIC" "DECIMAL"
	"BOOLEAN" "DATE" "DATETIME" "100" "256" "PRIMARY"
	"KEY" "(" ")" "," ";" "\""
    )

    for i in ${brkdwn[@]}; do
	schm="${schm//${i}/$' '}"
    done
    local -a arrflds=( ${schm} )
    export idf="rowid" act="${arrflds[0]}" dmf="${arrflds[1]}" emf="${arrflds[2]}" unf="${arrflds[3]}" pwf="${arrflds[4]}" cmf="${arrflds[5]}"
    unset tbls schm brkdwn arrflds
}

func_regex_allow(){
    # Allowable char classes: [:graph:]==[:alnum:][:punct:]
    echo -ne "[:graph:]" 
}

func_regex_forbid(){
    # Returns a regex string with all forbidden chars to check against user input
    # echo -ne "\`\"'|,\$"
    # echo -ne "[=\`=][=\"=][=\'=][=|=][=,=][=\$=]"
    # echo -ne "$'\`'$'\"'$'\''$'|'$','$'\$'$'\'$' '"
    echo -ne "\ \`\$|,\"'"
}

func_chkinpt(){
    # Returns true (0) on match false (1) otherwise
    [[ "${1}" =~ [$(func_regex_forbid)] ]]
}

func_chkpwd(){
    local pw="${1:-NULL}" pw1="${2:-NULL}"
    [[ "${pw}" != "${pw1}" ]]
}

# Generate PassWord
func_gpw() {
    local pw="$(
        LC_ALL=C tr -dc [$(func_regex_allow)] < /dev/urandom | \
		 tr -d "$(func_regex_forbid)" | \
		 dd ibs=1 obs=1 count="${1:-64}" 2>/dev/null)"
    echo "${pw//\\//}"
}

# RowID'S
# func_rids() {
#     "${dcm[@]}" "$(sql_rids)"
# }

# -.-
func_maxid() {
    local maxid="$("${dcm[@]}" "$(sql_maxid)")"
    echo "${maxid:-0}" # check null values
}

# Row count
func_rcount() {
    "${dcm[@]}" "$(sql_rcount)"
}

# Build Row Lines (for (X)dialog check/radio lists)
func_brl() {
    local IFS=$'\n'
    local -a rs=( $("${sql3[@]}" "${1:-"$(sql_brl)"}") )
    for i in ${rs[@]}; do
	local IFS=$'\|'
	local -a rec=( ${i[@]} )
	local rl+="${rec[0]} ${rec[1]//\ /_}|${rec[2]//\ /_}|${rec[3]//\ /_}|${rec[4]//\ /_} off\n"
    done
    [[ -n "${rl[*]}" ]] && echo -ne "${rl[*]}" || echo -ne "-1 No|Records|Found OFF"
}

func_brlzen(){
    echo "$("${sql3[@]}" "$(sql_brl)")"
}
