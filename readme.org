#+title: bashpass
#+author: michaeltd
#+date: <2019-08-18 Sun>
#+description: password generator, storage, and reference for the terminal and/or X.
#+options: toc:t num:t
#+html: <p align="center"><img src="assets/password.jpg"/></p>

password generator, storage and reference for the terminal and/or X.

* Use Case

  1. I can create passwords
  2. \slash \slash recall passwords
  3. \slash \slash update passwords
  4. \slash \slash delete accounts
  5. \slash \slash import a csv file
  6. \slash \slash export a csv file

** Using [[file:assets/bp.png][terminal]]

#+html: <p align="center"><img src="assets/bp.png"/></p>

** Using [[file:assets/dp.png][dialog]], cdialog

#+html: <p align="center"><img src="assets/dp.png"/></p>

** Using [[file:assets/xp.png][Xdialog]]

#+html: <p align="center"><img src="assets/xp.png"/></p>

** Using [[file:assets/zn.png][zenity]]

#+html: <p align="center"><img src="assets/zn.png"/></p>

** Using [[file:assets/yd.png][yad]]

#+html: <p align="center"><img src="assets/yd.png"/></p>

* Files
  1. [[file:bashpass]]

     main script

     1) [[file:sources/]]

       Accompanied functions.
       Namely sqlite3, general and UI specific

  2. [[file:setup]]

     Setup script with first time run only commands

  3. [[file:examples/][examples]]
     
     Create DB script and import example files.

     1) [[file:examples/create.sql][create.sql]]

        SQLite database create example script

     2) [[file:examples/import.csv][import.csv]]

        Accounts import example format

  4. [[file:tests.bats]]

     Bats tests file.

     Needs [[https://github.com/bats-core/bats-core][bats]] installed to run.

  5. [[file:readme.org]]

     This file

  6. [[file:license]]

     A License

* Dependencies

  1. GNU Privacy Guard

     You need gnupg installed, ~gpg~ executable readily available in ~${PATH}.~

  2. SQLite v3

     SQLite3 installed and ~sqlite3~ available in ~${PATH}.~

  3. BASH v4

     A recent Bash installation with a major version no less than 4.

  4. Optionally...

     1. yad,zenity,kdialog,Xdialog for an X client.

     2. whiptail,cdialog,dialog for a tty TUI.

     3. finally, xclip for some middle click password pasting functionality.

* Usage

** Disclaimer - Use at your own risk!!!

   This author makes no claims, guarantees or promises of any kind!

   This project is nothing more than a UI/CRUD/SQL/PGP playground!

   So with that out of the way and If you're still around, let's move along ...

** tl;dr

   1. ~git clone https://github.com/michaeltd/bashpass && cd bashpass~

   2. ~./setup [sample.gpg]~

   3. ~./bashpass [sample.gpg] [yad|zenity|kdialog|Xdialog|cdialog|dialog|terminal] [--debug] [--help]~

** In detail

*** First time only:

**** [[https://www.gnupg.org/gph/en/manual/c14.html][Default gpg keyring]]

     If you don't already have one, make a [[https://www.gnupg.org/gph/en/manual/c14.html][default gpg keyring]].

**** Make and encrypt a ~sample.gpg~ SQLite3 file.

***** The easy way:

      Run ~setup [sample.gpg]~ from [[file:bashpass][bashpass]]'s directory.

      It'll create ~databases/sample~ SQLite3 and encrypt it as ~databases/sample.gpg~ to your personal keyring

***** The hard way:

      You'll need to build ~sample~ like so: ~sqlite3 databases/sample < examples/create.sql~

      and encrypt it like so: ~gpg --default-recipient-self --output databases/sample.gpg --encrypt databases/sample~,

      Reason being SQLite3 ~sample~ file you'll work with, needs to be encrypted to your own keyring.

      All relevant files must reside in [[file:bashpass][bashpass]]'s directory.

*** Subsequent uses:

    For subsequent uses just fire up the script directly: ~bashpass [sample.gpg]~ from a terminal,

** Optional command line arguments

   - If you'd like to test other UI options try: ~bashpass [yad|zenity|kdialog|Xdialog|whiptail|cdialog|dialog]~, needless to say they have to be installed. If not ~bashpass~ will default to the highest available option in that order.

   - You can provide an SQLite3 database for use with ~bashpass~. That db needs to be encrypted to your personal keyring and have a ~.gpg~ extension.

   - The ~debug~ option will ~set -x~ to ~bashpass~, enabling it to echo commands in the terminal. To say the least: It's noisy!

   - Help will print out Usage and exit.

   - The order of arguments is irrelevant. ie: ~bashpass sample.gpg terminal~ == ~bashpass terminal sample.gpg~)

* Notes

  1. You can only have one instance of each ~*.gpg~ file open at any given time for obvious reasons. Internally enforced by a simple MUTEX implementation.

  2. Consider launching [[file:bashpass][bashpass]] with launch from terminal option enabled (where available, eg in dmenu: ~xterm -hold -e /path/to/bashpass [sample.gpg]~) as it will not run otherwise. For SQLite session availability, gnupg input and debugging purposes.

  3. Passwords generated by [[file:bashpass][bashpass]] are 64 character long ~[:graph:]~ type random strings (with some exceptions: ~[="=] [='=] [=|=] [=,=]~) from ~/dev/urandom~.

  4. GNU Privacy Guard file that'll be provided has to have a ~*.gpg~ extension. If no ~.gpg~ file parameter given, the script will default to ~sample.gpg~.

  5. After <2019-11-27 Wed> depending on xclip availability, if on Xdialog mode and on single record Create, Retrieve or Update operations, you'll be able to paste affected password via middle-click.

  6. Again... Not tested for production use at any load or capacity!

** Security concerns

   This script assumes you can secure the safety of your computer hardware/software at least for the duration of its operations.

   ~sample~ SQLite files used by this application get shredded upon quitting (if ~shred~ is available in system), otherwise a file recovery tool could recover unencrypted versions of them.

   Backup never hurt nobody [+.-]

* TO-DOS [3/3] [100%]
** DONE ✔ Encryption
   CLOSED: [2019-08-22 Thu 01:43]
   Add pgp encryption
** DONE ✔ Clipboard
   CLOSED: [2019-11-27 Wed 02:21]
   Depending on xclip availability on Xdialog mode and upon single record Create,Retrieve,Update operations selected password will be copied to ~XA_PRIMARY~ xclip target (pasteable with middle mouse button), with it's trailing newline ('\n') removed.
** DONE ✔ Modular UI [3/3] [100%]
   CLOSED: [2019-08-22 Thu 01:43]
   Depending on the environment.
*** DONE ✔ GUI
    CLOSED: [2019-08-22 Thu 01:44]
    Based on availability
*** DONE ✔ GUI/TUI
    CLOSED: [2019-08-22 Thu 01:44]
    Based on X
*** DONE ✔ zenity/yad support
    CLOSED: [2021-08-22 Sun 01:45]
    Done
* Contributing [[http://unmaintained.tech/][http://unmaintained.tech/badge.svg]]

  Typos, syntactic and grammar welcome, other than that all PR's will be reviewed.

  In the rare case that you really *must* contribute, feel free to buy me some coffee in [[https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3THXBFPG9H3YY&source=michaeltd/.emacs.d][\euro]] or [[bitcoin:19TznUEx2QZF6hQxL64bf3x15VWNy8Xitm][₿]] (bitcoin:19TznUEx2QZF6hQxL64bf3x15VWNy8Xitm).

* [[file:license][ISC License]] [[https://opensource.org/licenses/ISC][https://img.shields.io/badge/License-ISC-yellow.svg]]
