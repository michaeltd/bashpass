#!/bin/bash
#
# Pick up right editor syntax highlighting
#shellcheck disable=SC2207,SC2154

func_show_msg() {
    local -r ttl="${sbn}: Error!" msg="${FUNCNAME[1]}: ${*}"
    if [[ -n "$(type -P notify-send)" && -n "${DISPLAY}" ]]; then
        "$(type -P notify-send)" "-i" "${sdn}/assets/gpa.png" "-c" "notification" "-t" "${XDTO}" "${ttl}" "${msg}"
    elif [[ -n "$(type -P dialog)" && -z "${DISPLAY}" ]]; then
        "$(type -P dialog)" "--title" "${ttl}" "--msgbox" "${msg}" "0" "0"
    else
        echo -ne "${ttl}\n${msg}\n" >&2
    fi
    return 1
}

func_do_quit() {
    # VACUUM on an sqlite db will safely delete erased records as per https://www.sqlite.org/lang_vacuum.html
    "${sql3[@]}" "VACUUM;"
    # Upon successfull encryption ONLY shred files
    # "${gpgc[@]}" "${gpgf}" "--encrypt" "${db}" && "${shrc[@]}" {"${db}","${tf}","${mutex}"}
    if ! "${gpgc[@]}" "${gpgf}" "--encrypt" "${db}"; then
	func_show_msg "Something smells fishy!"
	exit "${?}"
    else
	local -ar f2d=( "${db}" "${tf}" "${mutex}" )
	for i in ${f2d[@]}; do
	    ${shrc[@]} "${i}";
	done
	read -rp "Return to continue ... "
	exit "${1:-0}"
    fi
}

func_check_prereqs(){
    if [[ ! -t 0 ]]; then
        func_show_msg "You'll need to run ${0/*\/} in a terminal (or tty)!"
    elif [[ "${BASH_VERSINFO[0]}" -lt "4" ]]; then
        func_show_msg "You'll need bash major version no less than 4."
    elif [[ -z "$(type -P sqlite3 2> /dev/null)" ]]; then
        func_show_msg "You need SQLite3 installed."
    elif [[ -z "$(type -P gpg 2> /dev/null)" ]] && [[ -z "$(type -P gpg2 2> /dev/null)" ]]; then
        func_show_msg "You need GNU Privacy Guard v2 (gnupg) installed."
    fi
}

# No mutex or func_show_msg.
func_check_mutex() {
    # local -ar pids=( $(pgrep -U "${USER}" -f "${bngpgf}") )
    # if [[ "${#pids[*]}" -gt "1" ]]; then
    # 	func_show_msg "You can only have one instance of ${bngpgf}."
    # fi
    if [[ -f "${mutex}" ]]; then
	func_show_msg "You can only have one instance of ${bngpgf}."
    fi
}

# Decrypt .sqlite, setup temp and mutex or func_show_msg.
func_check_decrypt() {
    if ! [[ "$(file -b "${gpgf}")" =~ ^PGP ]]; then
        func_show_msg "${bngpgf}, does not appear to be a valid PGP file."
        return $?
    elif ! "${gpgc[@]}" "${db}" "--decrypt" "${gpgf}"; then
        func_show_msg "Decryption failed."
        return $?
    elif ! [[ "$(file -b "${db}")" =~ ^SQLite ]]; then # We do have an decrypted $db file so we might as well check it's validity.
        func_show_msg "${bndb}, does not appear to be a valid SQLite 3.x database file."
        return $?
    else
        touch {"${mutex}","${tf}"}
    fi
}


# SQL or func_show_msg.
func_check_sql() {
    if ! "${dcm[@]}" "$(sl3_select_all)" &> /dev/null; then
        func_show_msg "Need a working db to function."
    fi
}

func_read_dbflds(){
    # ADHOC db table fields extractor just for the lolz factor.
    local -a tbls=($("${sql3[@]}" ".tables"))
    local schm="$("${sql3[@]}" ".schema ${tbls[0]}")"
    schm="${schm^^}" # sqlite is case insensitive
    local -a brkdwn=("CREATE" "TABLE" "IF" "NOT" "NULL" "EXISTS" "NCHAR" "100" "256" "PRIMARY" "KEY" "(" ")" "," ";")
    for i in ${brkdwn[@]}; do
	schm="${schm//${i}/$' '}"
    done
    local -a arrflds=( ${schm} )
    export idf="rowid" act="${arrflds[0]}" dmf="${arrflds[1]}" emf="${arrflds[2]}" unf="${arrflds[3]}" pwf="${arrflds[4]}" cmf="${arrflds[5]}"
    unset tbls schm brkdwn arrflds
}

# Generate PassWord
func_gpw() {
    LC_ALL=C tr -dc [:graph:] < /dev/urandom | \
	tr -d "\"\'\|\,\\" | \
	dd ibs=1 obs=1 count="${1:-64}" 2>/dev/null
    echo
}

# RowID'S
# func_rids() {
#     "${dcm[@]}" "$(sl3_rids)"
# }

# -.-
func_maxid() {
    local maxid="$("${dcm[@]}" "$(sl3_maxid)")"
    echo "${maxid:-0}" # check null values
}

# Row count
func_rcount() {
    "${dcm[@]}" "$(sl3_rcount)"
}

# Build Row Lines (for (X)dialog check/radio lists)
func_brl() {
    local IFS=$'\n'
    local -a rs=( $("${sql3[@]}" "${1:-"$(sl3_brl)"}") )
    for i in ${rs[@]}; do
	local IFS=$'\|'
	local -a rec=( ${i[@]} )
        local rl+="${rec[0]} ${rec[1]:-NULL}:${rec[2]:-NULL}:${rec[3]:-NULL}:${rec[4]:-NULL} off\n"
    done
    [[ -n "${rl[*]}" ]] && echo -ne "${rl[*]}" || echo -ne "-1 NoRecordsFound ON"
}

func_brlzen(){
    echo "$("${sql3[@]}" "$(sl3_brlzen)")"
}
