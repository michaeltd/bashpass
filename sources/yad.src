#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare -rx center_op="--center" \
	title_op="--title=${bngpgf}"

declare -rx H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 2 )) \
	W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 2 ))

declare -arx geometry_ops=( "--height=$H" "--width=$W" )

declare -arx gc_ops=( ${geometry_ops[@]} "${center_op}" ) \
	gct_ops=( ${geometry_ops[@]} "${center_op}" "${title_op}" ) \
	ct_ops=( "${center_op}" "${title_op}" )

declare -arx menu_ops=( "${gc_ops[@]}" "--list" "--title=Select action" "--no-headers" "--column=Option" "--column=SDesc" "--column=LDesc" ) \
	create_ops=( "${gct_ops[@]}" "--form" "--separator=," "--field=Domain" "--field=Email" "--field=Uname" "--field=Password!Insert pasword or length or empty for auto:H" "--field=Password2!Insert password again.:H" "--field=Comment" ) \
	retrieve_ops=( "${ct_ops[@]}" "--text=Enter domain to look for (empty for All):" "--entry" ) \
	preview_ops=( "${gct_ops[@]}" "--text=Records Found" "--list" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UName" "--column" "Password:HD" "--column" "Comment" "--separator= " ) \
	update_ops=( "${gct_ops[@]}" "--text=Select an ID to update:" "--list" "--radiolist" "--column" "Update" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UName" ) \
	password_ops=( "${ct_ops[@]}" "--text=Enter password or length/empty for auto:" "--entry" "--hide-text" ) \
	password1_ops=( "${ct_ops[@]}" "--text=Enter password again:" "--entry" "--hide-text" ) \
	delete_ops=( "${gct_ops[@]}" "--text=Select an ID to delete:" "--list" "--radiolist" "--column" "Update" "--column" "ID" "--column" "Domain" "--column" "Email" "--column" "UName" ) \
	csv_ops=( "${center_op}" "--title" "Select a csv file:" "--file" ) \
	results_ops=( "${gct_ops[@]}" "--text-info" ) \
	message_ops=( "${ct_ops[@]}" "--info"  ) \
	usage_ops=( "${gc_ops[@]}" "--info" "--title=Help screen" )

bashpass_yad(){
    OFS=$IFS IFS=$'\|'
    "${DIALOG}" "${menu_ops[@]}" ${gui_menu} > "${tf}"
    errlvl=$?
    local -a resp=( $(cat ${tf}) )
    IFS="${OFS}"
    local selection="${resp[0]}"
    echo "${selection}" > "${tf}"
    return $errlvl
}

create_yad() {
    local errlvl cnt=0
    "${DIALOG}" "${create_ops[@]}" > "${tf}"
    errlvl=$?
    (( errlvl != DIALOG_OK )) && return $errlvl
    local -r vals="$(cat "${tf}")"
    OFS="${IFS}" IFS=,
    for i in $vals; do
	arv[((cnt++))]="$i"
    done
    IFS="${OFS}"
    echo -ne "dm=\"${arv[0]}\"\nem=\"${arv[1]}\"\nun=\"${arv[2]}\"\npw=\"${arv[3]}\"\npw1=\"${arv[4]}\"\ncm=\"${arv[5]}\"\n" > "${tf}"
}

retrieve_yad() {
    local dm errlvl
    "${DIALOG}" "${retrieve_ops[@]}" > "${tf}"
    errlvl=$? dm="$(cat "${tf}")"
    (( errlvl != DIALOG_OK )) && return "${errlvl}"
    echo -ne "dm=\"${dm}\"" > "${tf}"
}

preview_yad(){
    local errlvl rs pw
    "${DIALOG}" "${preview_ops[@]}" $(cat ${tf}) > "${tf}"
    errlvl=$? 
    local rs=( $(cat ${tf}) )
    pw="${rs[4]}"
    if (( errlvl != DIALOG_OK )) || [[ -z "${pw}" ]]; then
	return 1
    fi
    "${DIALOG}" "${ct_ops[@]}" "--text=Selected Password:" "--entry" "--entry-text=${pw}" > /dev/null
}

update_yad() {
    local id errlvl pw pw1 rs
    "${DIALOG}" "${update_ops[@]}" $(brlzen) > "${tf}"
    errlvl=$? OFS="${IFS}" IFS=$'\|'
    local rs=( $(cat ${tf}) )
    IFS="${OFS}" id="${rs[1]}"
    if (( errlvl != DIALOG_OK )) || [[ -z "${id}" ]]; then
	return 1
    fi

    "${DIALOG}" "${password_ops[@]}" > "${tf}"
    errlvl=$? pw="$(cat "${tf}")"
    if (( errlvl != DIALOG_OK )); then
	return "${errlvl}"
    fi

    "${DIALOG}" "${password1_ops[@]}" > "${tf}"
    errlvl=$? pw1="$(cat "${tf}")"
    if (( errlvl != DIALOG_OK )); then
	return "${errlvl}"
    fi
    
    echo -ne "id=\"${id}\"\npw=\"${pw}\"\npw1=\"${pw1}\"" > "${tf}"
}

delete_yad() {
    local id errlvl rs

    "${DIALOG}" "${delete_ops[@]}" $(brlzen) > "${tf}"
    errlvl=$?     OFS="${IFS}" IFS=$'\|'
    local rs=( $(cat ${tf}) )
    IFS="${OFS}" id="${rs[1]}"
    if (( errlvl != DIALOG_OK )) || [[ -z "${id}" ]]; then
	return 1
    fi
    echo -ne "id=\"${id}\"" > "${tf}"
}

csv_yad(){
    local errlvl csvf
    "${DIALOG}" "${csv_ops[@]}" "--file-name=${1:-${sdn}/examples}" "${2}" > "${tf}"
    errlvl=$?
    (( errlvl != DIALOG_OK )) && return $errlvl
    csvf="$(cat "${tf}")"
    [[ -z "${csvf}" ]] && return 1
    echo -ne "csvf=\"${csvf}\"\n" > "${tf}"
}

importcsv_yad() {
    csv_yad "${sdn}/examples/import.csv"
}

exportcsv_yad() {
    csv_yad "${sdn}/examples/export.csv" "--save"
}

results_yad(){
    [[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    "${DIALOG}" "${results_ops[@]}" "--filename=${tf}"
}

message_yad(){
    "${DIALOG}" "${message_ops[@]}" "--text=Account #${id} deleted. No errors reported."
}

usage_yad() {
    "${DIALOG}" "${usage_ops[@]}" "--text=${gui_hmsg[*]}"
}
