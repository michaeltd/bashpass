#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare -rx center_op="--center" \
	title_op="--title=${bngpgf}"

declare -rx H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 2 )) \
	W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 2 ))

declare -arx geometry_ops=( "--height=$H" "--width=$W" )

declare -arx gc_ops=( ${geometry_ops[@]} "${center_op}" ) \
	gct_ops=( ${geometry_ops[@]} "${center_op}" "${title_op}" ) \
	ct_ops=( "${center_op}" "${title_op}" )

bashpass_yad(){
    OFS=$IFS IFS=$'\|'
    "${DIALOG}" "${gc_ops[@]}" "--list" \
		"--title=Select action" "--no-headers" \
		"--column=Option" "--column=SDesc" \
		"--column=LDesc" ${gui_menu} > "${tf}"
    errlvl=$?
    local -a resp=( $(cat ${tf}) )
    IFS="${OFS}"
    local selection="${resp[0]}"
    echo "${selection}" > "${tf}"
    return $errlvl
}

create_yad() {
    local errlvl cnt=0
    "${DIALOG}" "${gct_ops[@]}" "--form" "--separator=," \
		"--field=Domain" "--field=Email" "--field=Uname" \
 		"--field=Password:H" "--field=Comment" > "${tf}"
    errlvl=$?
    (( errlvl != DIALOG_OK )) && return $errlvl
    local -r vals="$(cat "${tf}")"
    OFS="${IFS}" IFS=,
    for i in $vals; do
	arv[((cnt++))]="$i"
    done
    IFS="${OFS}"
    echo -ne "dm=\"${arv[0]}\"\nem=\"${arv[1]}\"\nun=\"${arv[2]}\"\npw=\"${arv[3]}\"\ncm=\"${arv[4]}\"\n" > "${tf}"
}

retrieve_yad() {
    local dm errlvl
    "${DIALOG}" "${ct_ops[@]}" \
		"--text=Enter domain to look for (empty for All):" "--entry" > "${tf}"
    errlvl=$? dm="$(cat "${tf}")"
    (( errlvl != DIALOG_OK )) && return "${errlvl}"
    echo -ne "dm=\"${dm}\"" > "${tf}"
}

update_yad() {
    local id errlvl pw rs
    "${DIALOG}" "${gct_ops[@]}" "--text=Select an ID to update:" \
		"--list" "--radiolist" \
		"--column" "Update" "--column" "ID" "--column" "Domain" \
		"--column" "Email" "--column" "UName" $(brlzen) > "${tf}"
    errlvl=$? OFS="${IFS}" IFS=$'\|'
    local rs=( $(cat ${tf}) )
    IFS="${OFS}" id="${rs[1]}"
    if (( errlvl != DIALOG_OK )) || [[ -z "${id}" ]]; then
	return 1
    fi

    "${DIALOG}" "${ct_ops[@]}" "--text=Enter a password or a password length (8-64) or empty for auto (max length): " "--entry" > "${tf}"
    errlvl=$? pw="$(cat "${tf}")"
    if (( errlvl != DIALOG_OK )); then
	return "${errlvl}"
    fi

    echo -ne "id=\"${id}\"\npw=\"${pw}\"" > "${tf}"
}

delete_yad() {
    local id errlvl rs
    "${DIALOG}" "${gct_ops[@]}" "--text=Select an ID to delete:" \
		"--list" "--radiolist" \
		"--column" "Update" "--column" "ID" "--column" "Domain" \
		"--column" "Email" "--column" "UName" $(brlzen) > "${tf}"
    errlvl=$? OFS="${IFS}" IFS=$'\|'
    local rs=( $(cat ${tf}) )
    IFS="${OFS}" id="${rs[1]}"
    if (( errlvl != DIALOG_OK )) || [[ -z "${id}" ]]; then
	return 1
    fi
    echo -ne "id=\"${id}\"" > "${tf}"
}

csv_yad(){
    local errlvl csvf
    "${DIALOG}" "${center_op}" "--title" "Select a csv file:" \
		"--file" "--file-name=${1:-${sdn}/examples}" "${2}" > "${tf}"
    errlvl=$?
    (( errlvl != DIALOG_OK )) && return $errlvl
    csvf="$(cat "${tf}")"
    [[ -z "${csvf}" ]] && return 1
    echo -ne "csvf=\"${csvf}\"\n" > "${tf}"
}

importcsv_yad() {
    csv_yad "${sdn}/examples/import.csv"
}

exportcsv_yad() {
    csv_yad "${sdn}/examples/export.csv" "--save"
}

results_yad(){
    [[ -n "$(type -P xclip)" ]] && echo "${pw}" | "xclip" "-r"
    "${DIALOG}" "${gct_ops[@]}" "--text-info" "--filename=${tf}"
}

message_yad(){
    "${DIALOG}" "${ct_ops[@]}" "--info" "--text=Account #${id} deleted successfully.\nNo errors reported."
}

usage_yad() {
    "${DIALOG}" "${center_op}" "--info" "--title=Help screen" "--text=${gui_hmsg[*]}"
}
