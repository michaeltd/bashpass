#!/bin/bash
#
# Just to pickup syntax highlighting
#shellcheck disable=SC2207,SC2154

declare H=$(( $(xwininfo -root | awk '$1=="Height:" {print $2}') / 3 )) W=$(( $(xwininfo -root | awk '$1=="Width:" {print $2}') / 3 ))

create_yad() {
    "${DIALOG}" --height=$H --width=$W --forms --separator=',' --add-entry="Domain" --add-entry="Email" --add-entry="Uname" --add-entry="Password" --add-entry="Comment" > ${TF}

    if (( $? == 0 )); then
	${CCM} ".import ${TF} ${ACT}" 2> ${TF}
	if (( $? == 0 )); then
	    "${DIALOG}" --height=$H --width=$W --text-info --title="New account" \
		--text=<<<$(${RCM} "select * from ${ACT} where rowid = $(( maxid + 1 ));")
	else
	    "${DIALOG}" --height=$H --width=$W --text-info --title="Error" \
		--text=<<<$(cat ${TF})
	fi
    fi
}

retrieve_yad() {

    DM=$("${DIALOG}" --height=$H --width=$W --title="Enter domain" --text "Domain?" --entry-text="enter a domain" --entry)

    if (( ${?} == 0 )); then
	${RCM} "select rowid as id,* from ${ACT} where dm like '%${DM}%';" > ${TF}
	"${DIALOG}" --height=$(( W + 200 )) --width=$(( W + 100 )) --text-info \
	    --title="Results" --filename=${TF}
    fi
}

update_yad() {
    local REC=$(sqlite3 -separator " " ${DB} "select 'FALSE' as state, rowid as id, dm as domain from ${ACT} order by rowid asc;")
    local ZEN=$("${DIALOG}" --height=$H --width=$W --list --checklist --column "Update" --column "ID" --column "Domain" ${REC[@]})
    OFS=$IFS
    IFS=$'\|'
    for ID in $ZEN; do
	sqlite3 ${DB} "update ${ACT} set pw = '$(gpw)' where rowid = '${ID}';"
	"${DIALOG}" --height=$H --width=$W --text-info --title="New password" \
	    --text=<<<$(sqlite3 -line ${DB} "select * from ${ACT} where rowid = '${ID}';")
    done
    IFS=$OFS
}

delete_yad() {
    local REC=$(sqlite3 -separator " " ${DB} "select 'FALSE' as state, rowid as id, dm as domain, em as email from ${ACT} order by rowid asc;")
    local ZEN=$("${DIALOG}" --height=$H --width=$W --list --checklist --column "Update" --column "ID" --column "Domain" --column "Email" ${REC[@]})
    
    local RES=""

    if [[ "x${ZEN}" != "x" ]]; then
	OFS=$IFS IFS=$'\|'
	for ID in ${ZEN}; do
	    sqlite3 ${DB} "delete from ${ACT} where rowid = '${ID}';"
	    RES+=$?
	done
	IFS=$OFS
	
	for ((x=0;x<${#RES};x++)); do
	    if [[ "${RES:$x:1}" != "0" ]]; then
		"${DIALOG}" --error --title="Error." --text="Errors reported."
		return
	    fi
	done
	"${DIALOG}" --info --title="Account(/s) deleted successfully." --text="No errors reported."
    fi
}

import_yad() {

    local MAXID=$(maxid)
    
    local CSVF=$("${DIALOG}" --title="Select a csv file to import:" --file-selection)

    if [[ -n ${CSVF} ]]; then
	${CCM} ".import ${CSVF} ${ACT}" > ${TF}
	if (( $? == 0 )); then
	    "${DIALOG}" --height=$H --width=$W --text-info --title="New account(/s)" \
		--text=<<<$(${RCM} "select * from ${ACT} where rowid > '${MAXID}';")
	else
	    "${DIALOG}" --height=$H --width=$W --text-info --title="Error" \
		--text=<<<$(cat ${TF})
	fi
    fi
}

usage_yad() {
    "${DIALOG}" --height=$H --width=$W --info \
	--title="Help screen" --text="${HM[@]}"
}

# while :; do
#     OFS=$IFS IFS=$'\|'

#     RES=$(yad --height=$H --width=$W --list --title="Select action" --hide-header --column="Option" --column="Desc" --column="Description" ${MT})

#     IFS=$OFS

#     case "${RES}" in
# 	"${GOP[0]}") create ;;
# 	"${GOP[1]}") retrieve ;;
# 	"${GOP[2]}") update ;;
# 	"${GOP[3]}") delete ;;
# 	"${GOP[4]}") import ;;
# 	"${GOP[5]}") ${RCM} ;;
# 	"${GOP[6]}") usage ;;
# 	"${GOP[7]}") exit ;;
# 	*) exit;;
#     esac
# done
