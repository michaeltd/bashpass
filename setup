#!/usr/bin/env bash
#
# bashpass/setup - prep bashpass

umask 077

declare sdn="$(dirname "$(realpath "${BASH_SOURCE[0]}")")" \
	sbn="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

setup() {

    cd "${sdn}" || { echo "Something's not quite right..." >&2; exit 1; }
    
    source "srcs/functions.src" || return $?

    func_check_prereqs || return $?

    local dbsd="dbs"
    
    if [[ -z "${1}" ]]; then
	local gpgf="sample.gpg"
    elif [[ "${1}" =~ .gpg$ ]]; then
	local gpgf="${1}"
    else
	local gpgf="${1}.gpg"
    fi

    local db="${gpgf%%.gpg}"
    local rpgpgf="${dbsd}/${gpgf}"
    local rpdb="${dbsd}/${db}"
    local fpgpgf="${sdn}/${rpgpgf}"
    local fpdb="${sdn}/${rpdb}"
    
    # gpg commands
    type -P gpg  &>/dev/null && gpgc="$(type -P gpg)"
    type -P gpg2 &>/dev/null && gpgc="$(type -P gpg2)"
    if [[ -n "${BP_KEY}" ]]; then
	local -a gpgec=("${gpgc}" "--quiet" "--batch" "--yes" "--trust-model" "always" "--recipient" "${BP_KEY}" "--output" "${rpgpgf}" "--encrypt" "${rpdb}")
    else
	local -a gpgec=("${gpgc}" "--quiet" "--yes" "--output" "${rpgpgf}" "--symmetric" "--encrypt" "${rpdb}")
    fi

    echo -ne " This script will:\n \
    1. Make a ${rpdb} SQLite3 file ... \n \
    2. encrypt it to ${rpgpgf} ... \n \
    3. Execute bashpass ${gpgf} \n"

    if [[ "$(read -rp " Continue? [y/N]: " r;echo "${r:-n}")" =~ ^[Yy] ]]; then
	sqlite3 "${rpdb}" < "${sdn}/examples/create.sql" && \
	    "${gpgec[@]}" && \
	    "./bashpass" "${gpgf}" && \
	    echo -ne "From now on you'll be able to start bashpass with: bashpass ${gpgf}\n" >&2
    fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && "${sbn}" "${@}"
