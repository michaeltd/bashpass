#!/usr/bin/env bash
#
# bashpass/setup - prep bashpass

declare sdn="$(dirname "$(realpath "${BASH_SOURCE[0]}")")" \
	sbn="$(basename "$(realpath "${BASH_SOURCE[0]}")")" gpgf db

setup() {
    source "${sdn}/sources/functions.src" || return $?

    func_check_prereqs || return $?

    type -P gpg  &>/dev/null && gpg="$(type -P gpg)"
    type -P gpg2 &>/dev/null && gpg="$(type -P gpg2)"
    readonly -a gpgc=( "${gpg}" "--default-recipient-self" "--output" )

    if [[ -z "${1}" ]]; then
	gpgf="sample.gpg"
	db="${gpgf%%.gpg}"
    elif [[ "${1}" =~ .gpg$ ]]; then
	gpgf="${1}"
	db="${gpgf%%.gpg}"
    else
	gpgf="${1}.gpg"
	db="${gpgf%%.gpg}"
    fi

    fpgpgf="${sdn}/databases/${gpgf}" fpdb="${sdn}/databases/${db}"

    echo -ne " This script will:\n \
    1. Make a ${db} SQLite3 file ... \n \
    2. encrypt it to ${gpgf} ... \n \
    3. Execute bashpass ${gpgf} \n"

    if [[ "$(read -rp " Continue? [y/N]: " r;echo "${r:-n}")" =~ ^[Yy] ]]; then
	sqlite3 "${fpdb}" < "${sdn}/examples/create.sql" && \
	    "${gpgc[@]}" "${fpgpgf}" "--encrypt" "${fpdb}" && \
	    "${sdn}/bashpass" "${gpgf}" && \
	    echo -ne "From now on you'll be able to start bashpass with: bashpass ${gpgf}\n" >&2
    fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && "${sbn}" "${@}"
